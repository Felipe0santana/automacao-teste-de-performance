/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 279.0, "minX": 0.0, "maxY": 25056.0, "series": [{"data": [[0.0, 279.0], [0.1, 283.0], [0.2, 286.0], [0.3, 287.0], [0.4, 288.0], [0.5, 289.0], [0.6, 289.0], [0.7, 289.0], [0.8, 290.0], [0.9, 290.0], [1.0, 290.0], [1.1, 290.0], [1.2, 291.0], [1.3, 291.0], [1.4, 291.0], [1.5, 291.0], [1.6, 291.0], [1.7, 291.0], [1.8, 292.0], [1.9, 292.0], [2.0, 292.0], [2.1, 292.0], [2.2, 292.0], [2.3, 292.0], [2.4, 292.0], [2.5, 292.0], [2.6, 293.0], [2.7, 293.0], [2.8, 293.0], [2.9, 293.0], [3.0, 293.0], [3.1, 293.0], [3.2, 293.0], [3.3, 293.0], [3.4, 293.0], [3.5, 293.0], [3.6, 293.0], [3.7, 293.0], [3.8, 293.0], [3.9, 293.0], [4.0, 294.0], [4.1, 294.0], [4.2, 294.0], [4.3, 294.0], [4.4, 294.0], [4.5, 294.0], [4.6, 294.0], [4.7, 294.0], [4.8, 294.0], [4.9, 294.0], [5.0, 294.0], [5.1, 294.0], [5.2, 294.0], [5.3, 294.0], [5.4, 294.0], [5.5, 294.0], [5.6, 295.0], [5.7, 295.0], [5.8, 295.0], [5.9, 295.0], [6.0, 295.0], [6.1, 295.0], [6.2, 295.0], [6.3, 295.0], [6.4, 295.0], [6.5, 295.0], [6.6, 295.0], [6.7, 295.0], [6.8, 295.0], [6.9, 295.0], [7.0, 295.0], [7.1, 295.0], [7.2, 296.0], [7.3, 296.0], [7.4, 296.0], [7.5, 296.0], [7.6, 296.0], [7.7, 296.0], [7.8, 296.0], [7.9, 296.0], [8.0, 296.0], [8.1, 296.0], [8.2, 296.0], [8.3, 296.0], [8.4, 296.0], [8.5, 296.0], [8.6, 296.0], [8.7, 296.0], [8.8, 296.0], [8.9, 296.0], [9.0, 296.0], [9.1, 296.0], [9.2, 296.0], [9.3, 296.0], [9.4, 297.0], [9.5, 297.0], [9.6, 297.0], [9.7, 297.0], [9.8, 297.0], [9.9, 297.0], [10.0, 297.0], [10.1, 297.0], [10.2, 297.0], [10.3, 297.0], [10.4, 297.0], [10.5, 297.0], [10.6, 297.0], [10.7, 297.0], [10.8, 297.0], [10.9, 297.0], [11.0, 297.0], [11.1, 297.0], [11.2, 297.0], [11.3, 298.0], [11.4, 298.0], [11.5, 298.0], [11.6, 298.0], [11.7, 298.0], [11.8, 298.0], [11.9, 298.0], [12.0, 298.0], [12.1, 298.0], [12.2, 298.0], [12.3, 298.0], [12.4, 298.0], [12.5, 298.0], [12.6, 298.0], [12.7, 298.0], [12.8, 298.0], [12.9, 298.0], [13.0, 298.0], [13.1, 298.0], [13.2, 298.0], [13.3, 299.0], [13.4, 299.0], [13.5, 299.0], [13.6, 299.0], [13.7, 299.0], [13.8, 299.0], [13.9, 299.0], [14.0, 299.0], [14.1, 299.0], [14.2, 299.0], [14.3, 299.0], [14.4, 299.0], [14.5, 299.0], [14.6, 299.0], [14.7, 299.0], [14.8, 299.0], [14.9, 299.0], [15.0, 299.0], [15.1, 299.0], [15.2, 299.0], [15.3, 299.0], [15.4, 299.0], [15.5, 300.0], [15.6, 300.0], [15.7, 300.0], [15.8, 300.0], [15.9, 300.0], [16.0, 300.0], [16.1, 300.0], [16.2, 300.0], [16.3, 300.0], [16.4, 300.0], [16.5, 300.0], [16.6, 300.0], [16.7, 300.0], [16.8, 300.0], [16.9, 300.0], [17.0, 300.0], [17.1, 300.0], [17.2, 300.0], [17.3, 301.0], [17.4, 301.0], [17.5, 301.0], [17.6, 301.0], [17.7, 301.0], [17.8, 301.0], [17.9, 301.0], [18.0, 301.0], [18.1, 301.0], [18.2, 301.0], [18.3, 301.0], [18.4, 301.0], [18.5, 301.0], [18.6, 301.0], [18.7, 301.0], [18.8, 301.0], [18.9, 301.0], [19.0, 301.0], [19.1, 301.0], [19.2, 301.0], [19.3, 301.0], [19.4, 302.0], [19.5, 302.0], [19.6, 302.0], [19.7, 302.0], [19.8, 302.0], [19.9, 302.0], [20.0, 302.0], [20.1, 302.0], [20.2, 302.0], [20.3, 302.0], [20.4, 302.0], [20.5, 302.0], [20.6, 302.0], [20.7, 302.0], [20.8, 302.0], [20.9, 302.0], [21.0, 302.0], [21.1, 302.0], [21.2, 302.0], [21.3, 302.0], [21.4, 302.0], [21.5, 302.0], [21.6, 302.0], [21.7, 302.0], [21.8, 302.0], [21.9, 303.0], [22.0, 303.0], [22.1, 303.0], [22.2, 303.0], [22.3, 303.0], [22.4, 303.0], [22.5, 303.0], [22.6, 303.0], [22.7, 303.0], [22.8, 303.0], [22.9, 303.0], [23.0, 303.0], [23.1, 303.0], [23.2, 303.0], [23.3, 303.0], [23.4, 303.0], [23.5, 303.0], [23.6, 303.0], [23.7, 303.0], [23.8, 303.0], [23.9, 304.0], [24.0, 304.0], [24.1, 304.0], [24.2, 304.0], [24.3, 304.0], [24.4, 304.0], [24.5, 304.0], [24.6, 304.0], [24.7, 304.0], [24.8, 304.0], [24.9, 304.0], [25.0, 304.0], [25.1, 304.0], [25.2, 304.0], [25.3, 304.0], [25.4, 304.0], [25.5, 304.0], [25.6, 305.0], [25.7, 305.0], [25.8, 305.0], [25.9, 305.0], [26.0, 305.0], [26.1, 305.0], [26.2, 305.0], [26.3, 305.0], [26.4, 305.0], [26.5, 305.0], [26.6, 305.0], [26.7, 305.0], [26.8, 305.0], [26.9, 305.0], [27.0, 305.0], [27.1, 305.0], [27.2, 305.0], [27.3, 306.0], [27.4, 306.0], [27.5, 306.0], [27.6, 306.0], [27.7, 306.0], [27.8, 306.0], [27.9, 306.0], [28.0, 306.0], [28.1, 306.0], [28.2, 306.0], [28.3, 306.0], [28.4, 306.0], [28.5, 306.0], [28.6, 306.0], [28.7, 306.0], [28.8, 306.0], [28.9, 306.0], [29.0, 307.0], [29.1, 307.0], [29.2, 307.0], [29.3, 307.0], [29.4, 307.0], [29.5, 307.0], [29.6, 307.0], [29.7, 307.0], [29.8, 307.0], [29.9, 307.0], [30.0, 307.0], [30.1, 307.0], [30.2, 307.0], [30.3, 308.0], [30.4, 308.0], [30.5, 308.0], [30.6, 308.0], [30.7, 308.0], [30.8, 308.0], [30.9, 308.0], [31.0, 308.0], [31.1, 308.0], [31.2, 308.0], [31.3, 308.0], [31.4, 308.0], [31.5, 308.0], [31.6, 308.0], [31.7, 308.0], [31.8, 309.0], [31.9, 309.0], [32.0, 309.0], [32.1, 309.0], [32.2, 309.0], [32.3, 309.0], [32.4, 309.0], [32.5, 309.0], [32.6, 309.0], [32.7, 309.0], [32.8, 309.0], [32.9, 309.0], [33.0, 310.0], [33.1, 310.0], [33.2, 310.0], [33.3, 310.0], [33.4, 310.0], [33.5, 310.0], [33.6, 310.0], [33.7, 310.0], [33.8, 310.0], [33.9, 310.0], [34.0, 310.0], [34.1, 310.0], [34.2, 310.0], [34.3, 310.0], [34.4, 311.0], [34.5, 311.0], [34.6, 311.0], [34.7, 311.0], [34.8, 311.0], [34.9, 311.0], [35.0, 311.0], [35.1, 311.0], [35.2, 311.0], [35.3, 311.0], [35.4, 311.0], [35.5, 311.0], [35.6, 311.0], [35.7, 312.0], [35.8, 312.0], [35.9, 312.0], [36.0, 312.0], [36.1, 312.0], [36.2, 312.0], [36.3, 312.0], [36.4, 312.0], [36.5, 312.0], [36.6, 312.0], [36.7, 312.0], [36.8, 313.0], [36.9, 313.0], [37.0, 313.0], [37.1, 313.0], [37.2, 313.0], [37.3, 313.0], [37.4, 313.0], [37.5, 313.0], [37.6, 313.0], [37.7, 313.0], [37.8, 313.0], [37.9, 313.0], [38.0, 313.0], [38.1, 314.0], [38.2, 314.0], [38.3, 314.0], [38.4, 314.0], [38.5, 314.0], [38.6, 314.0], [38.7, 314.0], [38.8, 314.0], [38.9, 314.0], [39.0, 315.0], [39.1, 315.0], [39.2, 315.0], [39.3, 315.0], [39.4, 315.0], [39.5, 315.0], [39.6, 315.0], [39.7, 315.0], [39.8, 315.0], [39.9, 316.0], [40.0, 316.0], [40.1, 316.0], [40.2, 316.0], [40.3, 316.0], [40.4, 316.0], [40.5, 316.0], [40.6, 316.0], [40.7, 316.0], [40.8, 317.0], [40.9, 317.0], [41.0, 317.0], [41.1, 317.0], [41.2, 317.0], [41.3, 317.0], [41.4, 317.0], [41.5, 317.0], [41.6, 317.0], [41.7, 318.0], [41.8, 318.0], [41.9, 318.0], [42.0, 318.0], [42.1, 318.0], [42.2, 318.0], [42.3, 318.0], [42.4, 318.0], [42.5, 318.0], [42.6, 319.0], [42.7, 319.0], [42.8, 319.0], [42.9, 319.0], [43.0, 319.0], [43.1, 319.0], [43.2, 319.0], [43.3, 319.0], [43.4, 319.0], [43.5, 320.0], [43.6, 320.0], [43.7, 320.0], [43.8, 320.0], [43.9, 320.0], [44.0, 320.0], [44.1, 320.0], [44.2, 321.0], [44.3, 321.0], [44.4, 321.0], [44.5, 321.0], [44.6, 321.0], [44.7, 321.0], [44.8, 321.0], [44.9, 321.0], [45.0, 322.0], [45.1, 322.0], [45.2, 322.0], [45.3, 322.0], [45.4, 322.0], [45.5, 322.0], [45.6, 322.0], [45.7, 322.0], [45.8, 323.0], [45.9, 323.0], [46.0, 323.0], [46.1, 323.0], [46.2, 323.0], [46.3, 323.0], [46.4, 323.0], [46.5, 324.0], [46.6, 324.0], [46.7, 324.0], [46.8, 324.0], [46.9, 324.0], [47.0, 324.0], [47.1, 324.0], [47.2, 325.0], [47.3, 325.0], [47.4, 325.0], [47.5, 325.0], [47.6, 325.0], [47.7, 325.0], [47.8, 326.0], [47.9, 326.0], [48.0, 326.0], [48.1, 326.0], [48.2, 326.0], [48.3, 326.0], [48.4, 327.0], [48.5, 327.0], [48.6, 327.0], [48.7, 327.0], [48.8, 327.0], [48.9, 327.0], [49.0, 328.0], [49.1, 328.0], [49.2, 328.0], [49.3, 328.0], [49.4, 328.0], [49.5, 328.0], [49.6, 329.0], [49.7, 329.0], [49.8, 329.0], [49.9, 329.0], [50.0, 329.0], [50.1, 329.0], [50.2, 330.0], [50.3, 330.0], [50.4, 330.0], [50.5, 331.0], [50.6, 331.0], [50.7, 331.0], [50.8, 332.0], [50.9, 332.0], [51.0, 332.0], [51.1, 332.0], [51.2, 332.0], [51.3, 332.0], [51.4, 333.0], [51.5, 333.0], [51.6, 333.0], [51.7, 333.0], [51.8, 333.0], [51.9, 334.0], [52.0, 334.0], [52.1, 334.0], [52.2, 334.0], [52.3, 334.0], [52.4, 335.0], [52.5, 335.0], [52.6, 335.0], [52.7, 335.0], [52.8, 335.0], [52.9, 335.0], [53.0, 336.0], [53.1, 336.0], [53.2, 336.0], [53.3, 337.0], [53.4, 337.0], [53.5, 337.0], [53.6, 337.0], [53.7, 337.0], [53.8, 337.0], [53.9, 338.0], [54.0, 338.0], [54.1, 338.0], [54.2, 338.0], [54.3, 338.0], [54.4, 339.0], [54.5, 339.0], [54.6, 339.0], [54.7, 340.0], [54.8, 340.0], [54.9, 340.0], [55.0, 340.0], [55.1, 340.0], [55.2, 340.0], [55.3, 340.0], [55.4, 341.0], [55.5, 341.0], [55.6, 341.0], [55.7, 341.0], [55.8, 342.0], [55.9, 342.0], [56.0, 342.0], [56.1, 342.0], [56.2, 343.0], [56.3, 343.0], [56.4, 343.0], [56.5, 343.0], [56.6, 344.0], [56.7, 344.0], [56.8, 344.0], [56.9, 344.0], [57.0, 344.0], [57.1, 344.0], [57.2, 345.0], [57.3, 345.0], [57.4, 345.0], [57.5, 346.0], [57.6, 346.0], [57.7, 346.0], [57.8, 346.0], [57.9, 347.0], [58.0, 347.0], [58.1, 347.0], [58.2, 348.0], [58.3, 348.0], [58.4, 349.0], [58.5, 349.0], [58.6, 349.0], [58.7, 349.0], [58.8, 349.0], [58.9, 349.0], [59.0, 350.0], [59.1, 350.0], [59.2, 351.0], [59.3, 351.0], [59.4, 352.0], [59.5, 352.0], [59.6, 352.0], [59.7, 352.0], [59.8, 353.0], [59.9, 353.0], [60.0, 353.0], [60.1, 353.0], [60.2, 354.0], [60.3, 354.0], [60.4, 354.0], [60.5, 355.0], [60.6, 355.0], [60.7, 355.0], [60.8, 356.0], [60.9, 357.0], [61.0, 357.0], [61.1, 357.0], [61.2, 358.0], [61.3, 358.0], [61.4, 358.0], [61.5, 359.0], [61.6, 359.0], [61.7, 359.0], [61.8, 360.0], [61.9, 361.0], [62.0, 361.0], [62.1, 361.0], [62.2, 362.0], [62.3, 362.0], [62.4, 362.0], [62.5, 363.0], [62.6, 363.0], [62.7, 363.0], [62.8, 364.0], [62.9, 364.0], [63.0, 365.0], [63.1, 365.0], [63.2, 365.0], [63.3, 366.0], [63.4, 366.0], [63.5, 366.0], [63.6, 367.0], [63.7, 367.0], [63.8, 368.0], [63.9, 368.0], [64.0, 368.0], [64.1, 368.0], [64.2, 369.0], [64.3, 369.0], [64.4, 369.0], [64.5, 370.0], [64.6, 370.0], [64.7, 371.0], [64.8, 371.0], [64.9, 372.0], [65.0, 372.0], [65.1, 372.0], [65.2, 373.0], [65.3, 373.0], [65.4, 374.0], [65.5, 374.0], [65.6, 375.0], [65.7, 375.0], [65.8, 376.0], [65.9, 376.0], [66.0, 377.0], [66.1, 377.0], [66.2, 378.0], [66.3, 378.0], [66.4, 378.0], [66.5, 379.0], [66.6, 379.0], [66.7, 379.0], [66.8, 380.0], [66.9, 380.0], [67.0, 380.0], [67.1, 381.0], [67.2, 382.0], [67.3, 382.0], [67.4, 382.0], [67.5, 383.0], [67.6, 384.0], [67.7, 384.0], [67.8, 385.0], [67.9, 385.0], [68.0, 385.0], [68.1, 386.0], [68.2, 387.0], [68.3, 388.0], [68.4, 389.0], [68.5, 390.0], [68.6, 390.0], [68.7, 390.0], [68.8, 391.0], [68.9, 392.0], [69.0, 392.0], [69.1, 393.0], [69.2, 393.0], [69.3, 394.0], [69.4, 394.0], [69.5, 395.0], [69.6, 396.0], [69.7, 396.0], [69.8, 397.0], [69.9, 398.0], [70.0, 398.0], [70.1, 400.0], [70.2, 400.0], [70.3, 400.0], [70.4, 401.0], [70.5, 402.0], [70.6, 402.0], [70.7, 403.0], [70.8, 404.0], [70.9, 404.0], [71.0, 405.0], [71.1, 406.0], [71.2, 407.0], [71.3, 408.0], [71.4, 409.0], [71.5, 409.0], [71.6, 410.0], [71.7, 410.0], [71.8, 411.0], [71.9, 411.0], [72.0, 413.0], [72.1, 413.0], [72.2, 415.0], [72.3, 416.0], [72.4, 416.0], [72.5, 417.0], [72.6, 417.0], [72.7, 418.0], [72.8, 418.0], [72.9, 419.0], [73.0, 420.0], [73.1, 421.0], [73.2, 421.0], [73.3, 422.0], [73.4, 422.0], [73.5, 423.0], [73.6, 424.0], [73.7, 424.0], [73.8, 425.0], [73.9, 426.0], [74.0, 427.0], [74.1, 427.0], [74.2, 427.0], [74.3, 428.0], [74.4, 428.0], [74.5, 429.0], [74.6, 430.0], [74.7, 430.0], [74.8, 431.0], [74.9, 431.0], [75.0, 432.0], [75.1, 432.0], [75.2, 433.0], [75.3, 433.0], [75.4, 434.0], [75.5, 434.0], [75.6, 435.0], [75.7, 436.0], [75.8, 436.0], [75.9, 437.0], [76.0, 439.0], [76.1, 439.0], [76.2, 440.0], [76.3, 442.0], [76.4, 443.0], [76.5, 444.0], [76.6, 444.0], [76.7, 445.0], [76.8, 446.0], [76.9, 447.0], [77.0, 447.0], [77.1, 449.0], [77.2, 450.0], [77.3, 451.0], [77.4, 452.0], [77.5, 453.0], [77.6, 454.0], [77.7, 454.0], [77.8, 456.0], [77.9, 457.0], [78.0, 458.0], [78.1, 459.0], [78.2, 460.0], [78.3, 461.0], [78.4, 462.0], [78.5, 463.0], [78.6, 465.0], [78.7, 467.0], [78.8, 468.0], [78.9, 469.0], [79.0, 470.0], [79.1, 472.0], [79.2, 473.0], [79.3, 473.0], [79.4, 474.0], [79.5, 474.0], [79.6, 476.0], [79.7, 477.0], [79.8, 478.0], [79.9, 479.0], [80.0, 481.0], [80.1, 482.0], [80.2, 484.0], [80.3, 484.0], [80.4, 485.0], [80.5, 486.0], [80.6, 486.0], [80.7, 487.0], [80.8, 489.0], [80.9, 489.0], [81.0, 492.0], [81.1, 493.0], [81.2, 495.0], [81.3, 496.0], [81.4, 496.0], [81.5, 497.0], [81.6, 498.0], [81.7, 500.0], [81.8, 501.0], [81.9, 502.0], [82.0, 502.0], [82.1, 505.0], [82.2, 505.0], [82.3, 507.0], [82.4, 508.0], [82.5, 509.0], [82.6, 510.0], [82.7, 510.0], [82.8, 511.0], [82.9, 512.0], [83.0, 515.0], [83.1, 516.0], [83.2, 517.0], [83.3, 518.0], [83.4, 520.0], [83.5, 520.0], [83.6, 521.0], [83.7, 522.0], [83.8, 524.0], [83.9, 526.0], [84.0, 526.0], [84.1, 528.0], [84.2, 529.0], [84.3, 530.0], [84.4, 530.0], [84.5, 531.0], [84.6, 532.0], [84.7, 534.0], [84.8, 536.0], [84.9, 539.0], [85.0, 539.0], [85.1, 542.0], [85.2, 544.0], [85.3, 545.0], [85.4, 547.0], [85.5, 548.0], [85.6, 550.0], [85.7, 551.0], [85.8, 552.0], [85.9, 554.0], [86.0, 555.0], [86.1, 556.0], [86.2, 557.0], [86.3, 559.0], [86.4, 562.0], [86.5, 564.0], [86.6, 567.0], [86.7, 567.0], [86.8, 568.0], [86.9, 571.0], [87.0, 574.0], [87.1, 579.0], [87.2, 580.0], [87.3, 581.0], [87.4, 584.0], [87.5, 585.0], [87.6, 587.0], [87.7, 588.0], [87.8, 590.0], [87.9, 592.0], [88.0, 594.0], [88.1, 595.0], [88.2, 596.0], [88.3, 598.0], [88.4, 600.0], [88.5, 601.0], [88.6, 603.0], [88.7, 604.0], [88.8, 606.0], [88.9, 607.0], [89.0, 608.0], [89.1, 609.0], [89.2, 611.0], [89.3, 614.0], [89.4, 616.0], [89.5, 618.0], [89.6, 623.0], [89.7, 625.0], [89.8, 627.0], [89.9, 630.0], [90.0, 631.0], [90.1, 633.0], [90.2, 634.0], [90.3, 635.0], [90.4, 638.0], [90.5, 641.0], [90.6, 643.0], [90.7, 650.0], [90.8, 653.0], [90.9, 657.0], [91.0, 659.0], [91.1, 662.0], [91.2, 665.0], [91.3, 666.0], [91.4, 669.0], [91.5, 672.0], [91.6, 675.0], [91.7, 677.0], [91.8, 685.0], [91.9, 687.0], [92.0, 689.0], [92.1, 694.0], [92.2, 697.0], [92.3, 700.0], [92.4, 703.0], [92.5, 705.0], [92.6, 708.0], [92.7, 710.0], [92.8, 716.0], [92.9, 720.0], [93.0, 725.0], [93.1, 728.0], [93.2, 729.0], [93.3, 734.0], [93.4, 739.0], [93.5, 741.0], [93.6, 746.0], [93.7, 749.0], [93.8, 756.0], [93.9, 766.0], [94.0, 768.0], [94.1, 776.0], [94.2, 781.0], [94.3, 789.0], [94.4, 795.0], [94.5, 809.0], [94.6, 812.0], [94.7, 814.0], [94.8, 824.0], [94.9, 831.0], [95.0, 841.0], [95.1, 852.0], [95.2, 864.0], [95.3, 871.0], [95.4, 880.0], [95.5, 887.0], [95.6, 904.0], [95.7, 912.0], [95.8, 917.0], [95.9, 943.0], [96.0, 956.0], [96.1, 971.0], [96.2, 987.0], [96.3, 1003.0], [96.4, 1006.0], [96.5, 1022.0], [96.6, 1041.0], [96.7, 1055.0], [96.8, 1058.0], [96.9, 1081.0], [97.0, 1086.0], [97.1, 1099.0], [97.2, 1116.0], [97.3, 1140.0], [97.4, 1181.0], [97.5, 1263.0], [97.6, 1392.0], [97.7, 1499.0], [97.8, 1552.0], [97.9, 1667.0], [98.0, 1978.0], [98.1, 2024.0], [98.2, 2380.0], [98.3, 2435.0], [98.4, 2516.0], [98.5, 2532.0], [98.6, 2550.0], [98.7, 2555.0], [98.8, 2568.0], [98.9, 2591.0], [99.0, 2627.0], [99.1, 2835.0], [99.2, 2947.0], [99.3, 3000.0], [99.4, 3081.0], [99.5, 3146.0], [99.6, 3162.0], [99.7, 3278.0], [99.8, 3308.0], [99.9, 3568.0], [100.0, 4203.0]], "isOverall": false, "label": "Passagem comprada com sucesso.", "isController": false}, {"data": [[0.0, 487.0], [0.1, 497.0], [0.2, 499.0], [0.3, 500.0], [0.4, 501.0], [0.5, 501.0], [0.6, 502.0], [0.7, 503.0], [0.8, 503.0], [0.9, 503.0], [1.0, 504.0], [1.1, 504.0], [1.2, 504.0], [1.3, 504.0], [1.4, 505.0], [1.5, 505.0], [1.6, 505.0], [1.7, 505.0], [1.8, 506.0], [1.9, 506.0], [2.0, 506.0], [2.1, 506.0], [2.2, 506.0], [2.3, 507.0], [2.4, 507.0], [2.5, 507.0], [2.6, 507.0], [2.7, 508.0], [2.8, 508.0], [2.9, 508.0], [3.0, 508.0], [3.1, 509.0], [3.2, 509.0], [3.3, 509.0], [3.4, 509.0], [3.5, 509.0], [3.6, 510.0], [3.7, 510.0], [3.8, 510.0], [3.9, 510.0], [4.0, 511.0], [4.1, 511.0], [4.2, 511.0], [4.3, 511.0], [4.4, 511.0], [4.5, 511.0], [4.6, 512.0], [4.7, 512.0], [4.8, 512.0], [4.9, 512.0], [5.0, 512.0], [5.1, 512.0], [5.2, 512.0], [5.3, 512.0], [5.4, 513.0], [5.5, 513.0], [5.6, 513.0], [5.7, 513.0], [5.8, 513.0], [5.9, 514.0], [6.0, 514.0], [6.1, 514.0], [6.2, 514.0], [6.3, 514.0], [6.4, 514.0], [6.5, 514.0], [6.6, 514.0], [6.7, 515.0], [6.8, 515.0], [6.9, 515.0], [7.0, 515.0], [7.1, 515.0], [7.2, 515.0], [7.3, 515.0], [7.4, 516.0], [7.5, 516.0], [7.6, 516.0], [7.7, 516.0], [7.8, 516.0], [7.9, 516.0], [8.0, 517.0], [8.1, 517.0], [8.2, 517.0], [8.3, 517.0], [8.4, 517.0], [8.5, 517.0], [8.6, 518.0], [8.7, 518.0], [8.8, 518.0], [8.9, 518.0], [9.0, 518.0], [9.1, 518.0], [9.2, 518.0], [9.3, 518.0], [9.4, 518.0], [9.5, 519.0], [9.6, 519.0], [9.7, 519.0], [9.8, 519.0], [9.9, 519.0], [10.0, 519.0], [10.1, 519.0], [10.2, 520.0], [10.3, 520.0], [10.4, 520.0], [10.5, 520.0], [10.6, 520.0], [10.7, 520.0], [10.8, 520.0], [10.9, 520.0], [11.0, 521.0], [11.1, 521.0], [11.2, 521.0], [11.3, 521.0], [11.4, 521.0], [11.5, 521.0], [11.6, 521.0], [11.7, 521.0], [11.8, 521.0], [11.9, 522.0], [12.0, 522.0], [12.1, 522.0], [12.2, 522.0], [12.3, 522.0], [12.4, 522.0], [12.5, 522.0], [12.6, 522.0], [12.7, 523.0], [12.8, 523.0], [12.9, 523.0], [13.0, 523.0], [13.1, 523.0], [13.2, 523.0], [13.3, 524.0], [13.4, 524.0], [13.5, 524.0], [13.6, 524.0], [13.7, 524.0], [13.8, 524.0], [13.9, 524.0], [14.0, 525.0], [14.1, 525.0], [14.2, 525.0], [14.3, 525.0], [14.4, 525.0], [14.5, 525.0], [14.6, 525.0], [14.7, 526.0], [14.8, 526.0], [14.9, 526.0], [15.0, 526.0], [15.1, 526.0], [15.2, 526.0], [15.3, 527.0], [15.4, 527.0], [15.5, 527.0], [15.6, 527.0], [15.7, 527.0], [15.8, 527.0], [15.9, 528.0], [16.0, 528.0], [16.1, 528.0], [16.2, 528.0], [16.3, 528.0], [16.4, 528.0], [16.5, 528.0], [16.6, 529.0], [16.7, 529.0], [16.8, 529.0], [16.9, 529.0], [17.0, 529.0], [17.1, 530.0], [17.2, 530.0], [17.3, 530.0], [17.4, 530.0], [17.5, 530.0], [17.6, 531.0], [17.7, 531.0], [17.8, 531.0], [17.9, 531.0], [18.0, 531.0], [18.1, 532.0], [18.2, 532.0], [18.3, 532.0], [18.4, 532.0], [18.5, 532.0], [18.6, 533.0], [18.7, 533.0], [18.8, 533.0], [18.9, 533.0], [19.0, 533.0], [19.1, 533.0], [19.2, 534.0], [19.3, 534.0], [19.4, 534.0], [19.5, 534.0], [19.6, 534.0], [19.7, 535.0], [19.8, 535.0], [19.9, 535.0], [20.0, 535.0], [20.1, 535.0], [20.2, 536.0], [20.3, 536.0], [20.4, 536.0], [20.5, 536.0], [20.6, 537.0], [20.7, 537.0], [20.8, 537.0], [20.9, 537.0], [21.0, 538.0], [21.1, 538.0], [21.2, 538.0], [21.3, 538.0], [21.4, 539.0], [21.5, 539.0], [21.6, 539.0], [21.7, 539.0], [21.8, 539.0], [21.9, 540.0], [22.0, 540.0], [22.1, 540.0], [22.2, 540.0], [22.3, 541.0], [22.4, 541.0], [22.5, 541.0], [22.6, 542.0], [22.7, 542.0], [22.8, 542.0], [22.9, 542.0], [23.0, 543.0], [23.1, 543.0], [23.2, 543.0], [23.3, 543.0], [23.4, 543.0], [23.5, 544.0], [23.6, 544.0], [23.7, 544.0], [23.8, 544.0], [23.9, 545.0], [24.0, 545.0], [24.1, 545.0], [24.2, 546.0], [24.3, 546.0], [24.4, 546.0], [24.5, 547.0], [24.6, 547.0], [24.7, 547.0], [24.8, 548.0], [24.9, 548.0], [25.0, 548.0], [25.1, 548.0], [25.2, 549.0], [25.3, 549.0], [25.4, 549.0], [25.5, 550.0], [25.6, 550.0], [25.7, 551.0], [25.8, 551.0], [25.9, 552.0], [26.0, 552.0], [26.1, 553.0], [26.2, 553.0], [26.3, 553.0], [26.4, 554.0], [26.5, 554.0], [26.6, 555.0], [26.7, 555.0], [26.8, 556.0], [26.9, 556.0], [27.0, 556.0], [27.1, 556.0], [27.2, 557.0], [27.3, 557.0], [27.4, 558.0], [27.5, 558.0], [27.6, 559.0], [27.7, 559.0], [27.8, 559.0], [27.9, 560.0], [28.0, 561.0], [28.1, 561.0], [28.2, 561.0], [28.3, 562.0], [28.4, 563.0], [28.5, 563.0], [28.6, 564.0], [28.7, 564.0], [28.8, 565.0], [28.9, 565.0], [29.0, 566.0], [29.1, 566.0], [29.2, 567.0], [29.3, 568.0], [29.4, 569.0], [29.5, 570.0], [29.6, 571.0], [29.7, 571.0], [29.8, 572.0], [29.9, 573.0], [30.0, 573.0], [30.1, 574.0], [30.2, 575.0], [30.3, 576.0], [30.4, 577.0], [30.5, 577.0], [30.6, 577.0], [30.7, 578.0], [30.8, 579.0], [30.9, 580.0], [31.0, 580.0], [31.1, 581.0], [31.2, 582.0], [31.3, 583.0], [31.4, 584.0], [31.5, 584.0], [31.6, 586.0], [31.7, 586.0], [31.8, 587.0], [31.9, 589.0], [32.0, 590.0], [32.1, 591.0], [32.2, 591.0], [32.3, 592.0], [32.4, 593.0], [32.5, 594.0], [32.6, 595.0], [32.7, 596.0], [32.8, 596.0], [32.9, 597.0], [33.0, 599.0], [33.1, 600.0], [33.2, 600.0], [33.3, 602.0], [33.4, 603.0], [33.5, 603.0], [33.6, 605.0], [33.7, 605.0], [33.8, 606.0], [33.9, 607.0], [34.0, 609.0], [34.1, 610.0], [34.2, 612.0], [34.3, 613.0], [34.4, 615.0], [34.5, 616.0], [34.6, 617.0], [34.7, 619.0], [34.8, 621.0], [34.9, 624.0], [35.0, 626.0], [35.1, 628.0], [35.2, 630.0], [35.3, 631.0], [35.4, 633.0], [35.5, 635.0], [35.6, 636.0], [35.7, 638.0], [35.8, 639.0], [35.9, 641.0], [36.0, 643.0], [36.1, 645.0], [36.2, 647.0], [36.3, 648.0], [36.4, 652.0], [36.5, 653.0], [36.6, 654.0], [36.7, 655.0], [36.8, 656.0], [36.9, 657.0], [37.0, 658.0], [37.1, 660.0], [37.2, 662.0], [37.3, 663.0], [37.4, 665.0], [37.5, 666.0], [37.6, 670.0], [37.7, 671.0], [37.8, 673.0], [37.9, 674.0], [38.0, 677.0], [38.1, 679.0], [38.2, 681.0], [38.3, 681.0], [38.4, 683.0], [38.5, 687.0], [38.6, 688.0], [38.7, 690.0], [38.8, 691.0], [38.9, 693.0], [39.0, 695.0], [39.1, 696.0], [39.2, 698.0], [39.3, 700.0], [39.4, 702.0], [39.5, 705.0], [39.6, 708.0], [39.7, 711.0], [39.8, 714.0], [39.9, 716.0], [40.0, 718.0], [40.1, 721.0], [40.2, 724.0], [40.3, 727.0], [40.4, 730.0], [40.5, 731.0], [40.6, 734.0], [40.7, 738.0], [40.8, 742.0], [40.9, 744.0], [41.0, 748.0], [41.1, 751.0], [41.2, 754.0], [41.3, 757.0], [41.4, 760.0], [41.5, 765.0], [41.6, 770.0], [41.7, 772.0], [41.8, 775.0], [41.9, 779.0], [42.0, 782.0], [42.1, 786.0], [42.2, 790.0], [42.3, 793.0], [42.4, 795.0], [42.5, 798.0], [42.6, 802.0], [42.7, 807.0], [42.8, 810.0], [42.9, 813.0], [43.0, 820.0], [43.1, 823.0], [43.2, 826.0], [43.3, 829.0], [43.4, 837.0], [43.5, 840.0], [43.6, 844.0], [43.7, 849.0], [43.8, 852.0], [43.9, 856.0], [44.0, 858.0], [44.1, 864.0], [44.2, 872.0], [44.3, 878.0], [44.4, 890.0], [44.5, 893.0], [44.6, 896.0], [44.7, 903.0], [44.8, 908.0], [44.9, 914.0], [45.0, 920.0], [45.1, 928.0], [45.2, 935.0], [45.3, 942.0], [45.4, 951.0], [45.5, 961.0], [45.6, 966.0], [45.7, 971.0], [45.8, 977.0], [45.9, 986.0], [46.0, 994.0], [46.1, 1003.0], [46.2, 1013.0], [46.3, 1019.0], [46.4, 1025.0], [46.5, 1033.0], [46.6, 1043.0], [46.7, 1052.0], [46.8, 1058.0], [46.9, 1066.0], [47.0, 1076.0], [47.1, 1087.0], [47.2, 1098.0], [47.3, 1109.0], [47.4, 1118.0], [47.5, 1127.0], [47.6, 1138.0], [47.7, 1153.0], [47.8, 1163.0], [47.9, 1172.0], [48.0, 1177.0], [48.1, 1180.0], [48.2, 1189.0], [48.3, 1212.0], [48.4, 1223.0], [48.5, 1232.0], [48.6, 1242.0], [48.7, 1261.0], [48.8, 1291.0], [48.9, 1312.0], [49.0, 1329.0], [49.1, 1338.0], [49.2, 1351.0], [49.3, 1373.0], [49.4, 1420.0], [49.5, 1440.0], [49.6, 1457.0], [49.7, 1469.0], [49.8, 1506.0], [49.9, 1513.0], [50.0, 1520.0], [50.1, 1523.0], [50.2, 1528.0], [50.3, 1530.0], [50.4, 1539.0], [50.5, 1545.0], [50.6, 1552.0], [50.7, 1560.0], [50.8, 1569.0], [50.9, 1573.0], [51.0, 1584.0], [51.1, 1593.0], [51.2, 1598.0], [51.3, 1609.0], [51.4, 1617.0], [51.5, 1624.0], [51.6, 1634.0], [51.7, 1643.0], [51.8, 1652.0], [51.9, 1657.0], [52.0, 1668.0], [52.1, 1679.0], [52.2, 1692.0], [52.3, 1701.0], [52.4, 1715.0], [52.5, 1730.0], [52.6, 1753.0], [52.7, 1766.0], [52.8, 1773.0], [52.9, 1790.0], [53.0, 1797.0], [53.1, 1820.0], [53.2, 1839.0], [53.3, 1861.0], [53.4, 1885.0], [53.5, 1906.0], [53.6, 1917.0], [53.7, 1933.0], [53.8, 1944.0], [53.9, 1960.0], [54.0, 1966.0], [54.1, 1972.0], [54.2, 1981.0], [54.3, 1986.0], [54.4, 1993.0], [54.5, 2001.0], [54.6, 2009.0], [54.7, 2016.0], [54.8, 2024.0], [54.9, 2036.0], [55.0, 2040.0], [55.1, 2050.0], [55.2, 2062.0], [55.3, 2081.0], [55.4, 2097.0], [55.5, 2108.0], [55.6, 2118.0], [55.7, 2123.0], [55.8, 2140.0], [55.9, 2149.0], [56.0, 2165.0], [56.1, 2184.0], [56.2, 2203.0], [56.3, 2208.0], [56.4, 2215.0], [56.5, 2220.0], [56.6, 2228.0], [56.7, 2239.0], [56.8, 2249.0], [56.9, 2262.0], [57.0, 2271.0], [57.1, 2280.0], [57.2, 2294.0], [57.3, 2300.0], [57.4, 2311.0], [57.5, 2321.0], [57.6, 2330.0], [57.7, 2347.0], [57.8, 2354.0], [57.9, 2370.0], [58.0, 2383.0], [58.1, 2393.0], [58.2, 2408.0], [58.3, 2428.0], [58.4, 2440.0], [58.5, 2450.0], [58.6, 2475.0], [58.7, 2489.0], [58.8, 2499.0], [58.9, 2507.0], [59.0, 2520.0], [59.1, 2528.0], [59.2, 2543.0], [59.3, 2563.0], [59.4, 2579.0], [59.5, 2598.0], [59.6, 2611.0], [59.7, 2639.0], [59.8, 2659.0], [59.9, 2677.0], [60.0, 2700.0], [60.1, 2731.0], [60.2, 2752.0], [60.3, 2775.0], [60.4, 2802.0], [60.5, 2812.0], [60.6, 2837.0], [60.7, 2862.0], [60.8, 2888.0], [60.9, 2901.0], [61.0, 2927.0], [61.1, 2956.0], [61.2, 2980.0], [61.3, 2998.0], [61.4, 3020.0], [61.5, 3070.0], [61.6, 3107.0], [61.7, 3138.0], [61.8, 3179.0], [61.9, 3208.0], [62.0, 3244.0], [62.1, 3281.0], [62.2, 3334.0], [62.3, 3405.0], [62.4, 3470.0], [62.5, 3520.0], [62.6, 3533.0], [62.7, 3547.0], [62.8, 3553.0], [62.9, 3563.0], [63.0, 3571.0], [63.1, 3575.0], [63.2, 3583.0], [63.3, 3593.0], [63.4, 3599.0], [63.5, 3605.0], [63.6, 3613.0], [63.7, 3618.0], [63.8, 3626.0], [63.9, 3639.0], [64.0, 3647.0], [64.1, 3650.0], [64.2, 3656.0], [64.3, 3660.0], [64.4, 3665.0], [64.5, 3676.0], [64.6, 3679.0], [64.7, 3684.0], [64.8, 3691.0], [64.9, 3699.0], [65.0, 3709.0], [65.1, 3713.0], [65.2, 3725.0], [65.3, 3731.0], [65.4, 3743.0], [65.5, 3754.0], [65.6, 3760.0], [65.7, 3770.0], [65.8, 3775.0], [65.9, 3784.0], [66.0, 3790.0], [66.1, 3800.0], [66.2, 3809.0], [66.3, 3816.0], [66.4, 3823.0], [66.5, 3835.0], [66.6, 3841.0], [66.7, 3854.0], [66.8, 3863.0], [66.9, 3880.0], [67.0, 3886.0], [67.1, 3894.0], [67.2, 3910.0], [67.3, 3931.0], [67.4, 3943.0], [67.5, 3956.0], [67.6, 3962.0], [67.7, 3974.0], [67.8, 3993.0], [67.9, 4031.0], [68.0, 4072.0], [68.1, 4114.0], [68.2, 4162.0], [68.3, 4236.0], [68.4, 4286.0], [68.5, 4323.0], [68.6, 4343.0], [68.7, 4375.0], [68.8, 4397.0], [68.9, 4433.0], [69.0, 4475.0], [69.1, 4516.0], [69.2, 4749.0], [69.3, 5079.0], [69.4, 6162.0], [69.5, 7544.0], [69.6, 7551.0], [69.7, 7555.0], [69.8, 7561.0], [69.9, 7564.0], [70.0, 7570.0], [70.1, 7575.0], [70.2, 7581.0], [70.3, 7586.0], [70.4, 7591.0], [70.5, 7593.0], [70.6, 7597.0], [70.7, 7602.0], [70.8, 7610.0], [70.9, 7614.0], [71.0, 7620.0], [71.1, 7627.0], [71.2, 7636.0], [71.3, 7644.0], [71.4, 7658.0], [71.5, 7667.0], [71.6, 7677.0], [71.7, 7683.0], [71.8, 7688.0], [71.9, 7693.0], [72.0, 7707.0], [72.1, 7717.0], [72.2, 7726.0], [72.3, 7730.0], [72.4, 7736.0], [72.5, 7741.0], [72.6, 7748.0], [72.7, 7755.0], [72.8, 7781.0], [72.9, 7806.0], [73.0, 7820.0], [73.1, 7841.0], [73.2, 7849.0], [73.3, 7860.0], [73.4, 7870.0], [73.5, 7897.0], [73.6, 7934.0], [73.7, 7984.0], [73.8, 7997.0], [73.9, 8002.0], [74.0, 8009.0], [74.1, 8039.0], [74.2, 8085.0], [74.3, 8133.0], [74.4, 8171.0], [74.5, 8184.0], [74.6, 8213.0], [74.7, 8229.0], [74.8, 8250.0], [74.9, 8283.0], [75.0, 8292.0], [75.1, 8308.0], [75.2, 8330.0], [75.3, 8341.0], [75.4, 8362.0], [75.5, 8378.0], [75.6, 8403.0], [75.7, 8419.0], [75.8, 8455.0], [75.9, 8469.0], [76.0, 8486.0], [76.1, 8516.0], [76.2, 8549.0], [76.3, 8570.0], [76.4, 8590.0], [76.5, 8634.0], [76.6, 8650.0], [76.7, 8670.0], [76.8, 8693.0], [76.9, 8719.0], [77.0, 8757.0], [77.1, 8785.0], [77.2, 8822.0], [77.3, 8856.0], [77.4, 8904.0], [77.5, 8957.0], [77.6, 9018.0], [77.7, 9081.0], [77.8, 9109.0], [77.9, 9179.0], [78.0, 9237.0], [78.1, 9280.0], [78.2, 9367.0], [78.3, 9462.0], [78.4, 9556.0], [78.5, 9602.0], [78.6, 9705.0], [78.7, 9821.0], [78.8, 9890.0], [78.9, 9943.0], [79.0, 10126.0], [79.1, 10180.0], [79.2, 10310.0], [79.3, 10434.0], [79.4, 10737.0], [79.5, 15548.0], [79.6, 15600.0], [79.7, 15618.0], [79.8, 15625.0], [79.9, 15645.0], [80.0, 15662.0], [80.1, 15678.0], [80.2, 15681.0], [80.3, 15684.0], [80.4, 15694.0], [80.5, 15700.0], [80.6, 15706.0], [80.7, 15711.0], [80.8, 15723.0], [80.9, 15732.0], [81.0, 15739.0], [81.1, 15743.0], [81.2, 15749.0], [81.3, 15755.0], [81.4, 15763.0], [81.5, 15773.0], [81.6, 15782.0], [81.7, 15790.0], [81.8, 15793.0], [81.9, 15799.0], [82.0, 15807.0], [82.1, 15814.0], [82.2, 15822.0], [82.3, 15829.0], [82.4, 15835.0], [82.5, 15837.0], [82.6, 15847.0], [82.7, 15854.0], [82.8, 15860.0], [82.9, 15869.0], [83.0, 15878.0], [83.1, 15888.0], [83.2, 15893.0], [83.3, 15912.0], [83.4, 15918.0], [83.5, 15931.0], [83.6, 15951.0], [83.7, 15963.0], [83.8, 15983.0], [83.9, 16001.0], [84.0, 16010.0], [84.1, 16013.0], [84.2, 16024.0], [84.3, 16032.0], [84.4, 16040.0], [84.5, 16047.0], [84.6, 16056.0], [84.7, 16074.0], [84.8, 16084.0], [84.9, 16091.0], [85.0, 16105.0], [85.1, 16113.0], [85.2, 16126.0], [85.3, 16137.0], [85.4, 16146.0], [85.5, 16155.0], [85.6, 16161.0], [85.7, 16175.0], [85.8, 16187.0], [85.9, 16196.0], [86.0, 16204.0], [86.1, 16219.0], [86.2, 16231.0], [86.3, 16244.0], [86.4, 16260.0], [86.5, 16272.0], [86.6, 16284.0], [86.7, 16302.0], [86.8, 16324.0], [86.9, 16339.0], [87.0, 16365.0], [87.1, 16390.0], [87.2, 16406.0], [87.3, 16416.0], [87.4, 16439.0], [87.5, 16449.0], [87.6, 16459.0], [87.7, 16483.0], [87.8, 16499.0], [87.9, 16510.0], [88.0, 16552.0], [88.1, 16560.0], [88.2, 16589.0], [88.3, 16625.0], [88.4, 16641.0], [88.5, 16669.0], [88.6, 16692.0], [88.7, 16712.0], [88.8, 16743.0], [88.9, 16781.0], [89.0, 16824.0], [89.1, 16836.0], [89.2, 16868.0], [89.3, 16920.0], [89.4, 16958.0], [89.5, 17000.0], [89.6, 17017.0], [89.7, 17041.0], [89.8, 17075.0], [89.9, 17116.0], [90.0, 17146.0], [90.1, 17167.0], [90.2, 17180.0], [90.3, 17206.0], [90.4, 17239.0], [90.5, 17278.0], [90.6, 17316.0], [90.7, 17334.0], [90.8, 17358.0], [90.9, 17413.0], [91.0, 17443.0], [91.1, 17474.0], [91.2, 17515.0], [91.3, 17552.0], [91.4, 17587.0], [91.5, 17605.0], [91.6, 17628.0], [91.7, 17666.0], [91.8, 17708.0], [91.9, 17732.0], [92.0, 17761.0], [92.1, 17794.0], [92.2, 17803.0], [92.3, 17867.0], [92.4, 17914.0], [92.5, 17967.0], [92.6, 18037.0], [92.7, 18062.0], [92.8, 18111.0], [92.9, 18147.0], [93.0, 18186.0], [93.1, 18210.0], [93.2, 18250.0], [93.3, 18387.0], [93.4, 18621.0], [93.5, 18846.0], [93.6, 21605.0], [93.7, 21648.0], [93.8, 21700.0], [93.9, 21736.0], [94.0, 21758.0], [94.1, 21783.0], [94.2, 21828.0], [94.3, 21845.0], [94.4, 21867.0], [94.5, 21890.0], [94.6, 21895.0], [94.7, 21912.0], [94.8, 21925.0], [94.9, 21934.0], [95.0, 21943.0], [95.1, 21948.0], [95.2, 21970.0], [95.3, 21979.0], [95.4, 21988.0], [95.5, 21996.0], [95.6, 22021.0], [95.7, 22034.0], [95.8, 22037.0], [95.9, 22050.0], [96.0, 22060.0], [96.1, 22082.0], [96.2, 22095.0], [96.3, 22103.0], [96.4, 22120.0], [96.5, 22130.0], [96.6, 22141.0], [96.7, 22156.0], [96.8, 22165.0], [96.9, 22183.0], [97.0, 22209.0], [97.1, 22229.0], [97.2, 22257.0], [97.3, 22280.0], [97.4, 22300.0], [97.5, 22323.0], [97.6, 22338.0], [97.7, 22380.0], [97.8, 22420.0], [97.9, 22463.0], [98.0, 22485.0], [98.1, 22515.0], [98.2, 22558.0], [98.3, 22687.0], [98.4, 22974.0], [98.5, 23112.0], [98.6, 23165.0], [98.7, 23260.0], [98.8, 23379.0], [98.9, 23426.0], [99.0, 23471.0], [99.1, 23528.0], [99.2, 23647.0], [99.3, 23901.0], [99.4, 24012.0], [99.5, 24110.0], [99.6, 24154.0], [99.7, 24225.0], [99.8, 24324.0], [99.9, 24421.0], [100.0, 25056.0]], "isOverall": false, "label": "Compra de passagem aérea", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 2476.0, "series": [{"data": [[600.0, 177.0], [700.0, 98.0], [800.0, 49.0], [900.0, 35.0], [1000.0, 37.0], [1100.0, 14.0], [1200.0, 6.0], [1300.0, 4.0], [1400.0, 3.0], [1500.0, 6.0], [1600.0, 4.0], [1700.0, 1.0], [1800.0, 1.0], [1900.0, 3.0], [2000.0, 3.0], [2100.0, 1.0], [2200.0, 2.0], [2300.0, 4.0], [2400.0, 4.0], [2500.0, 27.0], [2600.0, 4.0], [2800.0, 6.0], [2900.0, 6.0], [3000.0, 7.0], [3100.0, 7.0], [200.0, 701.0], [3200.0, 7.0], [3300.0, 4.0], [3400.0, 1.0], [3500.0, 2.0], [3600.0, 1.0], [3800.0, 1.0], [3900.0, 1.0], [4200.0, 1.0], [300.0, 2476.0], [400.0, 526.0], [500.0, 304.0]], "isOverall": false, "label": "Passagem comprada com sucesso.", "isController": false}, {"data": [[400.0, 18.0], [500.0, 2427.0], [600.0, 456.0], [700.0, 243.0], [800.0, 157.0], [900.0, 104.0], [1000.0, 84.0], [1100.0, 73.0], [1200.0, 46.0], [1300.0, 39.0], [1400.0, 33.0], [1500.0, 104.0], [1600.0, 78.0], [1700.0, 55.0], [1800.0, 34.0], [1900.0, 76.0], [2000.0, 69.0], [2100.0, 54.0], [2200.0, 84.0], [2300.0, 62.0], [2400.0, 50.0], [2500.0, 54.0], [2600.0, 33.0], [2800.0, 36.0], [2700.0, 29.0], [2900.0, 33.0], [3000.0, 20.0], [3100.0, 22.0], [3200.0, 18.0], [3300.0, 11.0], [3400.0, 11.0], [3500.0, 74.0], [3600.0, 110.0], [3700.0, 87.0], [3800.0, 78.0], [3900.0, 51.0], [4000.0, 18.0], [4300.0, 27.0], [4100.0, 13.0], [4200.0, 14.0], [4400.0, 19.0], [4500.0, 6.0], [4600.0, 3.0], [4800.0, 3.0], [4700.0, 3.0], [5000.0, 2.0], [5100.0, 1.0], [4900.0, 1.0], [5200.0, 1.0], [5500.0, 1.0], [5700.0, 1.0], [6000.0, 2.0], [6100.0, 2.0], [7600.0, 97.0], [7500.0, 90.0], [7800.0, 49.0], [7700.0, 68.0], [7900.0, 24.0], [8000.0, 28.0], [8100.0, 23.0], [8400.0, 35.0], [8300.0, 38.0], [8500.0, 26.0], [8200.0, 38.0], [8700.0, 28.0], [8600.0, 30.0], [8800.0, 15.0], [8900.0, 13.0], [9000.0, 15.0], [9100.0, 13.0], [9200.0, 13.0], [9300.0, 9.0], [9400.0, 8.0], [9700.0, 5.0], [9600.0, 8.0], [9500.0, 10.0], [10100.0, 9.0], [9800.0, 12.0], [9900.0, 7.0], [10000.0, 6.0], [10200.0, 5.0], [10700.0, 2.0], [10400.0, 4.0], [10300.0, 7.0], [10500.0, 3.0], [10600.0, 1.0], [10800.0, 1.0], [11000.0, 2.0], [11100.0, 1.0], [11200.0, 1.0], [15700.0, 105.0], [15800.0, 97.0], [15500.0, 8.0], [15600.0, 66.0], [16100.0, 74.0], [16000.0, 80.0], [16200.0, 52.0], [16300.0, 37.0], [15900.0, 48.0], [17300.0, 23.0], [16500.0, 31.0], [16400.0, 48.0], [17100.0, 31.0], [17000.0, 25.0], [16600.0, 31.0], [17200.0, 23.0], [16700.0, 23.0], [16900.0, 16.0], [17400.0, 21.0], [16800.0, 24.0], [17600.0, 24.0], [17500.0, 23.0], [18100.0, 21.0], [17700.0, 28.0], [18200.0, 13.0], [17800.0, 12.0], [17900.0, 14.0], [18000.0, 19.0], [18300.0, 4.0], [18400.0, 1.0], [18500.0, 5.0], [18600.0, 5.0], [18700.0, 3.0], [19200.0, 3.0], [18800.0, 1.0], [21500.0, 2.0], [22300.0, 28.0], [21900.0, 63.0], [22000.0, 53.0], [22100.0, 54.0], [22200.0, 32.0], [22500.0, 15.0], [21700.0, 29.0], [21600.0, 15.0], [21800.0, 36.0], [22400.0, 20.0], [23300.0, 4.0], [22900.0, 5.0], [22800.0, 1.0], [22700.0, 2.0], [23000.0, 5.0], [23100.0, 12.0], [23200.0, 8.0], [23400.0, 18.0], [23500.0, 10.0], [22600.0, 5.0], [23700.0, 3.0], [23800.0, 3.0], [23900.0, 5.0], [24000.0, 9.0], [24100.0, 12.0], [24200.0, 9.0], [24300.0, 8.0], [24400.0, 5.0], [24500.0, 1.0], [23600.0, 2.0], [24900.0, 1.0], [25000.0, 1.0], [24700.0, 1.0]], "isOverall": false, "label": "Compra de passagem aérea", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3733.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4377.0, "series": [{"data": [[0.0, 3733.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4377.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3814.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 180.0432761087265, "minX": 1.68571482E12, "maxY": 602.2299509001667, "series": [{"data": [[1.68571482E12, 389.5188866799201], [1.68571494E12, 180.0432761087265], [1.68571488E12, 602.2299509001667]], "isOverall": false, "label": "Teste de Pico", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68571494E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 290.0, "minX": 1.0, "maxY": 23695.666666666664, "series": [{"data": [[5.0, 303.0], [6.0, 309.0], [7.0, 302.0], [8.0, 304.6666666666667], [9.0, 302.0], [10.0, 297.0], [11.0, 294.0], [12.0, 299.75], [13.0, 303.0], [15.0, 303.4], [17.0, 316.0], [18.0, 318.0], [19.0, 300.3333333333333], [21.0, 306.6], [22.0, 295.0], [24.0, 320.85714285714283], [25.0, 316.7], [26.0, 314.33333333333337], [27.0, 311.61538461538464], [28.0, 329.0], [29.0, 308.8333333333333], [30.0, 304.92857142857144], [31.0, 320.29411764705884], [32.0, 366.2857142857143], [33.0, 309.1111111111111], [34.0, 322.16666666666663], [35.0, 319.0], [36.0, 316.11764705882354], [37.0, 311.45454545454544], [38.0, 312.57142857142856], [39.0, 309.4166666666667], [40.0, 344.37500000000006], [41.0, 336.1], [42.0, 336.70000000000005], [43.0, 334.8333333333333], [44.0, 306.99999999999994], [45.0, 310.69565217391306], [46.0, 324.2857142857143], [47.0, 319.5], [48.0, 324.1666666666667], [49.0, 316.05882352941177], [50.0, 326.1670984455955], [51.0, 337.6666666666667], [53.0, 370.0], [52.0, 357.0], [55.0, 473.0], [54.0, 301.6666666666667], [57.0, 432.9200000000001], [59.0, 322.0], [58.0, 407.2], [60.0, 369.25], [61.0, 294.0], [64.0, 364.0], [65.0, 313.0], [68.0, 533.0], [77.0, 539.0], [76.0, 497.0], [82.0, 422.0], [87.0, 527.0], [85.0, 430.3333333333333], [84.0, 513.5], [91.0, 308.0], [90.0, 506.25], [88.0, 442.0], [92.0, 354.0], [99.0, 703.0], [96.0, 504.0], [102.0, 311.0], [103.0, 392.6666666666667], [100.0, 426.0], [107.0, 429.0], [111.0, 297.5], [108.0, 298.0], [113.0, 306.0], [112.0, 489.0], [114.0, 567.0], [116.0, 634.0], [117.0, 676.0], [121.0, 635.5], [125.0, 458.5], [124.0, 660.0], [131.0, 335.6666666666667], [128.0, 532.0], [135.0, 528.0], [142.0, 340.0], [139.0, 526.0], [138.0, 640.0], [137.0, 369.0], [144.0, 355.6666666666667], [150.0, 705.0], [157.0, 340.0], [155.0, 487.0], [152.0, 535.0], [154.0, 594.0], [163.0, 330.5], [167.0, 307.34883720930225], [164.0, 366.0], [173.0, 292.0], [171.0, 353.0], [168.0, 466.4], [170.0, 373.0], [174.0, 414.0], [176.0, 365.66666666666663], [181.0, 574.0], [180.0, 539.0], [183.0, 290.0], [191.0, 556.0], [190.0, 434.0], [188.0, 434.0], [193.0, 440.0], [198.0, 468.0], [197.0, 454.0], [195.0, 406.5], [205.0, 366.0], [206.0, 383.0], [202.0, 321.0], [207.0, 567.0], [213.0, 334.0], [215.0, 320.0], [214.0, 320.0], [212.0, 311.0], [211.0, 318.2765957446808], [218.0, 337.3333333333333], [220.0, 458.7142857142857], [222.0, 541.0], [221.0, 359.5], [217.0, 300.0], [219.0, 453.0], [230.0, 489.8333333333333], [228.0, 826.0], [231.0, 340.0], [229.0, 316.0326797385622], [232.0, 522.5], [235.0, 376.0], [237.0, 436.4285714285714], [234.0, 339.0], [239.0, 410.0], [238.0, 517.6666666666666], [233.0, 414.25], [247.0, 555.0], [243.0, 350.0], [240.0, 441.0], [251.0, 692.0], [248.0, 697.0], [249.0, 349.0], [261.0, 319.0], [264.0, 481.5], [268.0, 369.0], [258.0, 483.0], [266.0, 380.0], [267.0, 305.0], [265.0, 510.0], [283.0, 467.0], [273.0, 531.0], [290.0, 455.0], [301.0, 440.0], [289.0, 540.25], [294.0, 799.0], [318.0, 624.0], [312.0, 580.0], [306.0, 436.0], [320.0, 470.0], [321.0, 552.0], [322.0, 556.0], [331.0, 465.0], [328.0, 351.0], [343.0, 507.0], [337.0, 312.0], [348.0, 317.0], [361.0, 372.0], [366.0, 338.0], [374.0, 398.0], [377.0, 598.0], [383.0, 546.6666666666666], [375.0, 820.0], [379.0, 467.0], [382.0, 322.0], [381.0, 374.1666666666667], [387.0, 409.5], [399.0, 396.0], [385.0, 641.0], [390.0, 662.3333333333334], [394.0, 469.3333333333333], [393.0, 407.0], [400.0, 411.5], [409.0, 567.2], [412.0, 652.6666666666666], [406.0, 581.0], [429.0, 522.0], [431.0, 416.0], [424.0, 330.5], [427.0, 477.0], [425.0, 550.0], [421.0, 408.0], [433.0, 444.25], [435.0, 498.0], [440.0, 326.0], [443.0, 345.0], [444.0, 487.0], [449.0, 446.0], [448.0, 409.0], [464.0, 443.3333333333333], [472.0, 428.0], [469.0, 461.0], [465.0, 497.0], [470.0, 540.0], [483.0, 413.5], [495.0, 419.0], [485.0, 359.0], [488.0, 431.0], [480.0, 436.5], [489.0, 385.0], [497.0, 497.0], [496.0, 475.6666666666667], [499.0, 506.5], [500.0, 477.0], [501.0, 507.75], [502.0, 562.0], [503.0, 446.6153846153846], [508.0, 474.0], [510.0, 560.5], [511.0, 670.0], [506.0, 386.6666666666667], [514.0, 349.0], [513.0, 600.0], [515.0, 352.0], [542.0, 365.0], [537.0, 307.54545454545456], [536.0, 424.0], [520.0, 410.75], [522.0, 445.5], [524.0, 442.6666666666667], [523.0, 429.0], [525.0, 316.61111111111103], [527.0, 328.77777777777777], [543.0, 745.5], [534.0, 298.0], [533.0, 359.9599999999999], [530.0, 317.0], [532.0, 312.0744680851064], [570.0, 344.2], [553.0, 358.5], [555.0, 404.5], [558.0, 359.5], [544.0, 296.5], [556.0, 314.0], [561.0, 432.0], [564.0, 396.75], [563.0, 299.0], [562.0, 308.0952380952381], [574.0, 300.0], [575.0, 330.3333333333333], [573.0, 414.25], [572.0, 315.0], [571.0, 320.34782608695656], [569.0, 352.6666666666667], [568.0, 349.5], [549.0, 350.5], [548.0, 309.0], [550.0, 364.0], [547.0, 355.5], [565.0, 341.0], [567.0, 320.0], [566.0, 325.0], [582.0, 595.0], [589.0, 299.0], [606.0, 327.0], [594.0, 450.0], [598.0, 328.0], [600.0, 359.0], [601.0, 315.0], [588.0, 308.6666666666667], [586.0, 343.0], [578.0, 381.0], [577.0, 302.0], [584.0, 353.0], [585.0, 391.0], [587.0, 473.0], [610.0, 373.0], [628.0, 336.5], [629.0, 322.0], [630.0, 343.0], [620.0, 369.0], [622.0, 434.0], [623.0, 380.0], [627.0, 404.0], [619.0, 327.0], [618.0, 306.99999999999994], [617.0, 336.0], [614.0, 368.0], [633.0, 304.0], [634.0, 303.0], [637.0, 324.0], [635.0, 306.0], [639.0, 328.0], [625.0, 341.0], [612.0, 404.2], [657.0, 308.0], [667.0, 313.0], [670.0, 360.0], [654.0, 396.0], [653.0, 493.0], [649.0, 376.0], [640.0, 325.0], [672.0, 403.0], [686.0, 352.0], [679.0, 519.0], [674.0, 344.0], [695.0, 436.0], [698.0, 562.0], [682.0, 329.0], [684.0, 346.0], [687.0, 306.0], [703.0, 324.0], [691.0, 400.0], [721.0, 349.0], [734.0, 448.0], [725.0, 380.75], [714.0, 358.0], [729.0, 332.6666666666667], [733.0, 322.0], [730.0, 322.0], [755.0, 743.3333333333334], [756.0, 360.5], [764.0, 476.0], [761.0, 506.6666666666667], [753.0, 575.0], [742.0, 368.0], [752.0, 343.0], [754.0, 316.0], [737.0, 358.0], [797.0, 377.5], [774.0, 498.0], [768.0, 363.0], [777.0, 315.0], [785.0, 568.0], [786.0, 487.6], [787.0, 520.0], [791.0, 303.0], [788.0, 414.5], [771.0, 410.5], [772.0, 467.0], [793.0, 457.5], [796.0, 380.0], [795.0, 382.5], [807.0, 354.5], [801.0, 430.5], [802.0, 453.0], [804.0, 315.5], [800.0, 335.0], [824.0, 3312.5], [819.0, 3265.0], [818.0, 3307.0], [816.0, 3317.0], [828.0, 311.0], [825.0, 325.0], [815.0, 3327.0], [811.0, 4203.0], [812.0, 307.6666666666667], [806.0, 301.0], [805.0, 302.0], [863.0, 375.0], [848.0, 304.0], [861.0, 308.0], [862.0, 296.0], [860.0, 450.0], [859.0, 428.0], [856.0, 3000.0], [846.0, 3497.5], [843.0, 3141.5], [840.0, 394.0], [855.0, 2952.0], [852.0, 2999.5], [850.0, 3698.0], [893.0, 392.0], [886.0, 403.5], [885.0, 328.0], [882.0, 368.0], [881.0, 314.0], [880.0, 461.0], [876.0, 446.0], [867.0, 490.0], [875.0, 418.0], [873.0, 430.5], [869.0, 458.0], [868.0, 433.0], [924.0, 377.0], [904.0, 454.5], [906.0, 506.0], [908.0, 347.5], [927.0, 352.5], [914.0, 474.6666666666667], [912.0, 476.0], [916.0, 335.0], [915.0, 372.0], [918.0, 428.0], [917.0, 321.0], [926.0, 375.0], [925.0, 371.0], [923.0, 359.0], [922.0, 364.5], [921.0, 313.0], [920.0, 368.0], [902.0, 1206.0], [901.0, 326.0], [933.0, 368.0], [958.0, 3040.6666666666665], [955.0, 3061.0], [957.0, 343.5], [954.0, 604.0], [935.0, 334.0], [934.0, 308.0], [932.0, 352.0], [931.0, 351.5], [930.0, 351.0], [929.0, 626.0], [928.0, 326.0], [950.0, 1489.0], [948.0, 2627.0], [945.0, 1374.0], [946.0, 368.6666666666667], [947.0, 421.0], [944.0, 378.0], [959.0, 458.0], [943.0, 315.3333333333333], [942.0, 350.0], [941.0, 317.0], [940.0, 398.0], [939.0, 319.0], [938.0, 322.0], [937.0, 319.0], [936.0, 315.0], [963.0, 994.0], [968.0, 422.0], [969.0, 324.0], [972.0, 1422.0], [971.0, 2574.6666666666665], [973.0, 2563.0], [974.0, 380.0], [960.0, 2835.0], [975.0, 748.0], [962.0, 2823.0], [961.0, 2619.0], [991.0, 1496.75], [990.0, 602.5], [976.0, 2557.6666666666665], [979.0, 1899.6666666666665], [977.0, 1229.3333333333333], [982.0, 2545.5], [983.0, 374.0], [981.0, 555.6666666666666], [980.0, 2543.0], [989.0, 2011.3333333333333], [987.0, 1005.0], [986.0, 2034.0], [984.0, 1453.5], [985.0, 295.0], [967.0, 1872.0], [965.0, 2591.0], [999.0, 1601.5], [1021.0, 2947.0], [995.0, 1530.75], [1005.0, 1532.6], [1006.0, 2025.0], [1007.0, 722.5], [992.0, 780.0], [994.0, 638.0], [993.0, 374.6666666666667], [1003.0, 1840.0], [1001.0, 851.0], [1000.0, 457.5], [1002.0, 581.0], [1023.0, 1338.3333333333335], [1022.0, 451.6666666666667], [1018.0, 2994.0], [1017.0, 3096.5], [1016.0, 1705.6666666666665], [998.0, 2944.0], [996.0, 1662.0], [997.0, 693.0], [1015.0, 1065.5], [1013.0, 924.0], [1012.0, 1689.5], [1009.0, 2596.0], [1008.0, 378.0], [1011.0, 2024.0], [1010.0, 1995.5], [1047.0, 665.9000000000001], [1050.0, 518.2533936651588], [1024.0, 345.0], [1026.0, 391.0], [1025.0, 313.0], [1027.0, 2237.25], [1028.0, 708.0], [1032.0, 1263.5], [1036.0, 429.0], [1035.0, 355.0], [1034.0, 348.0], [1033.0, 371.6666666666667], [1030.0, 354.0], [1031.0, 371.0], [1029.0, 1179.0], [1038.0, 529.8333333333333], [1039.0, 876.3333333333333], [1037.0, 853.5], [1049.0, 703.6363636363635], [1048.0, 643.6197183098593], [1046.0, 409.25000000000006], [1045.0, 485.0], [1044.0, 596.8181818181819], [1043.0, 724.2105263157895], [1041.0, 517.0], [1042.0, 346.5], [1040.0, 510.25], [1.0, 294.0]], "isOverall": false, "label": "Passagem comprada com sucesso.", "isController": false}, {"data": [[446.50463167181397, 447.0443317159235]], "isOverall": false, "label": "Passagem comprada com sucesso.-Aggregated", "isController": false}, {"data": [[2.0, 541.0], [3.0, 522.0], [4.0, 497.0], [5.0, 509.0], [6.0, 529.0], [7.0, 659.0], [8.0, 514.6], [9.0, 510.0], [10.0, 511.0], [12.0, 523.0], [14.0, 521.0], [15.0, 517.5], [16.0, 520.0], [17.0, 530.5], [18.0, 543.5], [19.0, 512.0], [20.0, 508.0], [21.0, 1937.25], [22.0, 935.4285714285714], [23.0, 550.0], [24.0, 515.0], [25.0, 541.6], [26.0, 542.8], [27.0, 559.923076923077], [28.0, 559.8571428571428], [29.0, 535.4444444444445], [30.0, 541.5500000000001], [31.0, 544.8571428571429], [32.0, 572.4], [33.0, 538.75], [34.0, 578.7272727272727], [35.0, 558.5], [36.0, 544.0], [37.0, 538.3333333333335], [38.0, 535.2857142857143], [39.0, 532.5454545454546], [40.0, 530.5454545454545], [41.0, 552.9999999999999], [42.0, 569.9473684210527], [43.0, 544.1428571428572], [44.0, 535.75], [45.0, 529.2857142857143], [46.0, 597.1000000000001], [47.0, 545.9166666666666], [48.0, 540.2222222222222], [49.0, 528.8181818181818], [50.0, 558.1192893401018], [51.0, 6110.375], [53.0, 22554.5], [52.0, 15367.0], [54.0, 17610.5], [55.0, 15230.666666666666], [57.0, 4059.357142857142], [56.0, 22446.5], [58.0, 11931.0], [59.0, 22551.5], [61.0, 11895.333333333334], [60.0, 15216.0], [63.0, 22355.666666666668], [62.0, 22344.0], [65.0, 11510.0], [66.0, 22778.666666666668], [64.0, 17614.0], [67.0, 22397.0], [71.0, 22418.5], [70.0, 16356.142857142857], [69.0, 23481.0], [68.0, 15055.666666666666], [75.0, 15354.833333333332], [74.0, 11595.0], [73.0, 22301.0], [72.0, 22261.0], [78.0, 22743.75], [76.0, 22920.666666666668], [79.0, 22321.0], [77.0, 22558.0], [82.0, 16899.0], [83.0, 18726.4], [81.0, 17949.4], [80.0, 22526.0], [87.0, 9790.1], [86.0, 13970.916666666666], [85.0, 22989.0], [84.0, 23622.3], [91.0, 22813.0], [90.0, 23107.285714285714], [89.0, 23016.5], [88.0, 19807.14285714286], [95.0, 22730.4], [93.0, 22878.333333333332], [92.0, 16699.714285714286], [98.0, 22809.25], [96.0, 22902.333333333332], [99.0, 15123.0], [97.0, 22121.5], [102.0, 11483.5], [103.0, 15057.333333333334], [101.0, 11370.0], [100.0, 22272.0], [107.0, 11399.0], [106.0, 22226.0], [105.0, 11576.75], [104.0, 15117.666666666666], [111.0, 19577.0], [110.0, 22122.0], [109.0, 17829.25], [108.0, 18183.4], [113.0, 22949.333333333332], [112.0, 22757.333333333332], [115.0, 13643.8], [114.0, 14981.0], [118.0, 22545.5], [119.0, 16797.5], [117.0, 22094.5], [116.0, 11392.5], [123.0, 22419.2], [121.0, 22147.0], [120.0, 22181.5], [122.0, 22037.0], [126.0, 16772.85714285714], [125.0, 17994.88888888889], [124.0, 18229.0], [127.0, 11445.0], [133.0, 22928.0], [132.0, 22641.250000000004], [128.0, 22605.333333333332], [131.0, 571.2], [134.0, 22112.5], [130.0, 22204.5], [129.0, 22108.5], [135.0, 22039.0], [140.0, 23000.333333333332], [142.0, 14890.333333333334], [143.0, 22049.0], [139.0, 16693.0], [138.0, 21977.5], [136.0, 22064.0], [141.0, 21986.5], [137.0, 21922.0], [151.0, 11403.833333333334], [149.0, 22100.5], [148.0, 22020.666666666668], [147.0, 21980.0], [146.0, 21991.333333333332], [145.0, 22162.5], [144.0, 7745.166666666666], [150.0, 21867.0], [152.0, 15503.22222222222], [159.0, 22571.4], [158.0, 11557.25], [157.0, 22667.0], [156.0, 21151.166666666664], [155.0, 22588.25], [154.0, 23695.666666666664], [153.0, 23231.777777777777], [163.0, 17871.8], [167.0, 1355.8023255813955], [166.0, 22387.0], [165.0, 22579.333333333332], [164.0, 22627.0], [161.0, 15534.666666666666], [160.0, 13693.6], [162.0, 21898.666666666668], [169.0, 16896.8], [174.0, 21269.25], [173.0, 20871.666666666668], [172.0, 21198.2], [171.0, 18059.0], [170.0, 20678.333333333332], [168.0, 5182.25], [175.0, 21919.333333333332], [176.0, 7709.222222222221], [183.0, 20104.75], [182.0, 20680.333333333332], [181.0, 20771.0], [180.0, 20386.0], [178.0, 14893.999999999998], [177.0, 19244.5], [179.0, 21836.0], [189.0, 16554.25], [191.0, 15726.25], [190.0, 16075.6], [188.0, 20104.0], [187.0, 20578.666666666668], [186.0, 20527.0], [185.0, 15929.75], [184.0, 20704.666666666668], [198.0, 4665.799999999999], [199.0, 10620.666666666666], [197.0, 19366.0], [196.0, 15660.0], [195.0, 16865.0], [194.0, 19886.0], [193.0, 20654.666666666668], [192.0, 20526.666666666668], [207.0, 20487.333333333332], [206.0, 16814.0], [205.0, 20039.5], [204.0, 20622.333333333332], [203.0, 20602.333333333332], [202.0, 21033.0], [201.0, 20040.0], [200.0, 20216.5], [209.0, 14614.999999999998], [211.0, 1168.5696202531647], [215.0, 11228.142857142859], [213.0, 14665.0], [212.0, 14500.75], [210.0, 19770.25], [214.0, 13185.333333333332], [208.0, 11130.5], [216.0, 11521.0], [218.0, 2748.05], [220.0, 5178.25], [221.0, 9648.666666666666], [223.0, 18871.333333333332], [222.0, 18822.0], [219.0, 18719.0], [217.0, 14446.5], [225.0, 9807.5], [227.0, 14298.0], [228.0, 14156.75], [230.0, 6683.454545454546], [231.0, 12892.25], [229.0, 1180.9467455621298], [226.0, 18595.75], [224.0, 18812.0], [232.0, 2032.8717948717945], [233.0, 10452.0], [235.0, 11509.666666666668], [237.0, 3483.722222222222], [239.0, 16838.333333333332], [238.0, 16809.666666666668], [236.0, 16984.333333333332], [234.0, 16963.666666666668], [245.0, 12720.5], [244.0, 12894.5], [243.0, 16968.333333333332], [242.0, 16629.2], [241.0, 17161.666666666668], [240.0, 17944.0], [247.0, 16750.0], [246.0, 16262.0], [248.0, 4689.75], [250.0, 14159.833333333334], [255.0, 16211.0], [254.0, 16220.5], [253.0, 16485.333333333332], [251.0, 16239.5], [252.0, 16059.0], [249.0, 16095.333333333334], [268.0, 5963.333333333333], [257.0, 8660.0], [258.0, 6480.333333333334], [259.0, 16471.666666666668], [261.0, 12958.0], [260.0, 16047.0], [262.0, 16222.0], [263.0, 16948.0], [256.0, 17422.18181818182], [264.0, 4084.4666666666662], [265.0, 16909.5], [271.0, 16429.666666666668], [270.0, 16833.0], [269.0, 16385.0], [267.0, 16753.333333333332], [266.0, 16578.0], [287.0, 13754.0], [281.0, 11262.666666666666], [286.0, 11091.666666666666], [285.0, 16907.0], [283.0, 16469.25], [282.0, 17417.2], [280.0, 13745.8], [277.0, 12801.5], [276.0, 11126.666666666666], [279.0, 11163.333333333334], [273.0, 16183.0], [272.0, 16560.0], [278.0, 16432.0], [275.0, 16895.25], [284.0, 16280.0], [274.0, 17250.6], [300.0, 11926.666666666666], [289.0, 7003.6], [290.0, 10118.4], [291.0, 17216.333333333332], [295.0, 10109.857142857143], [294.0, 6069.666666666667], [288.0, 16705.666666666668], [293.0, 16691.333333333332], [292.0, 16439.0], [297.0, 7614.857142857143], [301.0, 11225.5], [302.0, 12663.5], [303.0, 16852.666666666668], [296.0, 16494.25], [299.0, 16538.2], [298.0, 11244.0], [319.0, 16486.5], [306.0, 7280.0], [311.0, 17026.75], [310.0, 16054.0], [305.0, 14170.0], [304.0, 16078.0], [309.0, 16645.0], [308.0, 16672.666666666668], [314.0, 12505.0], [318.0, 16605.0], [317.0, 16961.0], [316.0, 16759.666666666668], [307.0, 16801.6], [315.0, 12546.75], [313.0, 16637.666666666668], [312.0, 16656.0], [334.0, 17284.714285714286], [327.0, 8424.333333333332], [335.0, 17240.5], [333.0, 16670.75], [332.0, 16126.0], [323.0, 16458.0], [322.0, 16625.0], [321.0, 16353.0], [320.0, 17065.5], [330.0, 16846.25], [331.0, 16086.0], [329.0, 16611.5], [328.0, 16774.25], [326.0, 16774.0], [325.0, 16544.75], [324.0, 16540.5], [350.0, 16207.75], [351.0, 12285.0], [349.0, 16956.0], [348.0, 11279.333333333334], [347.0, 16846.5], [346.0, 16590.0], [344.0, 16182.0], [345.0, 16077.5], [343.0, 17443.5], [342.0, 16115.0], [337.0, 8957.333333333334], [336.0, 16664.2], [339.0, 16558.0], [338.0, 13303.0], [341.0, 13314.8], [340.0, 16652.5], [365.0, 16275.2], [367.0, 16463.666666666668], [355.0, 12522.75], [361.0, 7612.857142857143], [366.0, 16500.666666666668], [364.0, 16667.0], [363.0, 16413.0], [362.0, 15899.666666666666], [360.0, 16364.0], [359.0, 16370.666666666666], [354.0, 16782.4], [353.0, 15999.5], [352.0, 16701.5], [358.0, 16912.0], [357.0, 16641.666666666668], [356.0, 15925.5], [383.0, 12602.0], [368.0, 11302.666666666666], [374.0, 10398.625], [372.0, 16418.666666666668], [373.0, 16295.0], [375.0, 16330.5], [377.0, 8592.5], [376.0, 16234.0], [382.0, 12409.0], [381.0, 11215.5], [380.0, 16470.5], [371.0, 16427.333333333332], [370.0, 16344.666666666666], [369.0, 16315.5], [379.0, 16286.75], [378.0, 16933.0], [396.0, 11171.333333333334], [384.0, 7388.142857142857], [387.0, 8656.333333333332], [386.0, 16411.4], [385.0, 8555.5], [390.0, 7860.111111111111], [388.0, 16494.0], [389.0, 16070.5], [391.0, 16136.0], [392.0, 13126.2], [395.0, 10099.8], [394.0, 16196.5], [393.0, 16353.0], [399.0, 16459.0], [398.0, 16358.666666666666], [397.0, 16379.5], [412.0, 4606.5], [415.0, 16790.333333333332], [400.0, 11104.333333333334], [407.0, 16187.0], [401.0, 12186.142857142857], [403.0, 16231.75], [402.0, 16514.5], [409.0, 6263.529411764706], [413.0, 16268.666666666666], [414.0, 12184.5], [411.0, 16498.0], [408.0, 16978.0], [406.0, 16271.666666666666], [405.0, 16728.666666666668], [404.0, 16235.2], [430.0, 16848.666666666668], [429.0, 10847.333333333334], [431.0, 16091.333333333334], [428.0, 18147.0], [427.0, 9776.142857142857], [426.0, 12212.75], [425.0, 11076.666666666666], [424.0, 12479.25], [423.0, 16507.166666666668], [419.0, 16469.0], [417.0, 16317.8], [416.0, 16131.0], [418.0, 16137.0], [421.0, 12213.25], [422.0, 16114.333333333334], [446.0, 16150.666666666666], [433.0, 13609.333333333334], [435.0, 7600.111111111112], [434.0, 16258.0], [438.0, 8652.0], [432.0, 5895.833333333333], [439.0, 15843.5], [437.0, 16258.5], [436.0, 11079.333333333334], [447.0, 12410.5], [440.0, 14196.0], [445.0, 16460.0], [444.0, 7584.888888888889], [443.0, 16785.666666666668], [442.0, 15908.0], [441.0, 16337.333333333334], [460.0, 16441.666666666668], [451.0, 10416.875], [450.0, 15880.0], [449.0, 8432.333333333332], [448.0, 12378.5], [463.0, 16432.8], [456.0, 15827.0], [462.0, 16319.5], [461.0, 12357.25], [457.0, 16433.666666666668], [459.0, 8366.25], [458.0, 15719.5], [455.0, 11261.333333333332], [453.0, 16159.6], [454.0, 15900.5], [452.0, 11111.333333333332], [478.0, 16133.0], [464.0, 12361.75], [465.0, 12395.5], [467.0, 16446.6], [466.0, 16407.0], [479.0, 16115.666666666666], [477.0, 16231.333333333334], [476.0, 11712.714285714286], [475.0, 16262.25], [474.0, 13193.6], [472.0, 16261.0], [473.0, 15860.0], [471.0, 13186.0], [469.0, 16465.25], [468.0, 15875.0], [470.0, 15817.0], [483.0, 11231.0], [485.0, 11616.142857142857], [484.0, 16196.0], [487.0, 16188.333333333334], [480.0, 15758.0], [482.0, 16345.333333333334], [481.0, 13175.6], [486.0, 16400.0], [488.0, 10828.0], [489.0, 7178.916666666667], [495.0, 8406.5], [494.0, 16218.0], [493.0, 16410.714285714286], [492.0, 8230.5], [491.0, 12186.25], [490.0, 16089.75], [497.0, 10848.666666666666], [496.0, 10387.625], [498.0, 11896.714285714284], [499.0, 5785.666666666667], [500.0, 8635.5], [501.0, 7488.571428571429], [503.0, 4747.842105263158], [502.0, 16032.666666666666], [505.0, 10966.666666666666], [508.0, 12119.0], [509.0, 12141.5], [510.0, 10842.833333333334], [511.0, 10023.2], [504.0, 15971.25], [506.0, 11344.800000000001], [507.0, 16168.0], [540.0, 5423.875], [515.0, 9875.8], [520.0, 8390.5], [521.0, 12820.2], [523.0, 15835.5], [524.0, 15735.0], [526.0, 2095.4], [525.0, 1167.86301369863], [512.0, 15897.25], [527.0, 4321.7], [514.0, 15906.25], [513.0, 12189.25], [522.0, 10883.333333333332], [543.0, 6239.666666666667], [529.0, 11751.5], [528.0, 8076.0], [531.0, 11956.75], [530.0, 16158.0], [533.0, 1637.8148148148148], [532.0, 1059.1300000000003], [535.0, 8426.333333333334], [534.0, 6484.333333333333], [542.0, 8532.333333333334], [541.0, 8574.333333333334], [539.0, 10601.0], [538.0, 7534.2], [537.0, 3216.0], [536.0, 8332.75], [519.0, 15913.666666666666], [518.0, 15988.5], [516.0, 15892.0], [517.0, 15743.5], [572.0, 3546.625], [547.0, 4940.5], [546.0, 9330.5], [545.0, 7051.333333333333], [544.0, 3046.142857142857], [549.0, 5665.4], [548.0, 3171.9230769230767], [551.0, 8516.333333333334], [550.0, 5468.2], [559.0, 6538.75], [558.0, 8512.666666666666], [557.0, 4655.666666666667], [556.0, 4273.0], [555.0, 3134.7], [554.0, 6850.8], [553.0, 5331.8], [552.0, 9133.0], [575.0, 2733.909090909091], [561.0, 7120.833333333334], [560.0, 6118.0], [563.0, 3407.8999999999996], [562.0, 2435.75], [565.0, 5782.833333333333], [564.0, 4058.8333333333335], [567.0, 5669.0], [566.0, 6413.0], [574.0, 5998.0], [573.0, 1682.8750000000002], [571.0, 1915.2758620689656], [570.0, 4687.75], [569.0, 6049.666666666667], [568.0, 3236.7999999999993], [606.0, 8668.6], [596.0, 8931.0], [607.0, 9471.0], [593.0, 8578.333333333334], [592.0, 5317.2], [595.0, 8771.5], [594.0, 6421.75], [603.0, 8521.333333333334], [605.0, 7985.0], [604.0, 7864.5], [602.0, 5443.8], [601.0, 8948.25], [600.0, 5188.0], [583.0, 6828.8], [582.0, 8516.0], [581.0, 7992.0], [580.0, 8627.75], [579.0, 7707.0], [578.0, 6505.5], [577.0, 8682.75], [576.0, 7958.0], [591.0, 5747.833333333333], [590.0, 8861.0], [588.0, 4198.0], [587.0, 8337.5], [586.0, 8691.5], [585.0, 8497.333333333334], [584.0, 6586.25], [599.0, 6045.666666666667], [598.0, 6679.0], [597.0, 8166.4], [632.0, 8766.25], [638.0, 6320.0], [618.0, 4666.333333333333], [617.0, 2179.666666666667], [616.0, 8972.4], [619.0, 3338.8888888888887], [621.0, 6377.0], [620.0, 3214.285714285714], [623.0, 8692.333333333334], [611.0, 8885.4], [612.0, 3506.6], [610.0, 3117.3333333333335], [609.0, 7832.5], [608.0, 8188.6], [614.0, 8033.5], [615.0, 7780.5], [613.0, 8887.0], [622.0, 4700.200000000001], [639.0, 6738.5], [624.0, 7282.666666666667], [626.0, 8665.5], [625.0, 5461.4], [628.0, 6773.75], [627.0, 8250.4], [637.0, 8442.333333333334], [636.0, 8425.4], [634.0, 8547.0], [633.0, 7905.0], [635.0, 7909.0], [630.0, 8252.666666666666], [631.0, 5797.666666666667], [629.0, 4078.625], [664.0, 8444.0], [670.0, 6990.2], [644.0, 6459.25], [643.0, 8433.333333333334], [642.0, 7269.333333333333], [641.0, 6298.2], [640.0, 8431.5], [645.0, 8422.333333333334], [647.0, 6078.6], [646.0, 8319.333333333334], [655.0, 8281.333333333334], [654.0, 7512.6], [653.0, 8931.166666666668], [649.0, 8444.333333333334], [652.0, 6317.5], [651.0, 5911.5], [650.0, 7860.0], [648.0, 8282.666666666666], [671.0, 8322.0], [657.0, 8146.666666666667], [659.0, 7984.0], [658.0, 8036.5], [656.0, 8510.333333333334], [661.0, 9080.0], [660.0, 8904.75], [668.0, 8375.0], [669.0, 6748.333333333333], [667.0, 7255.25], [666.0, 8830.0], [665.0, 7964.0], [663.0, 6360.5], [662.0, 8210.666666666668], [697.0, 8325.0], [702.0, 8205.5], [703.0, 8113.5], [689.0, 8407.0], [688.0, 8167.166666666666], [691.0, 8174.333333333333], [690.0, 7074.0], [693.0, 6969.6], [692.0, 6891.0], [701.0, 8567.75], [700.0, 8361.333333333334], [699.0, 5608.0], [698.0, 7183.25], [696.0, 8232.4], [679.0, 5773.666666666667], [678.0, 8582.25], [677.0, 8266.0], [676.0, 6901.5], [675.0, 8822.0], [674.0, 7298.4], [673.0, 8716.0], [672.0, 8317.666666666666], [687.0, 8748.5], [686.0, 8292.0], [685.0, 7178.5], [684.0, 8315.0], [683.0, 8649.333333333334], [681.0, 8766.0], [682.0, 7898.0], [680.0, 6982.8], [695.0, 3510.333333333333], [694.0, 8325.666666666666], [732.0, 6273.5], [723.0, 5361.75], [722.0, 8213.0], [721.0, 8225.0], [720.0, 8453.0], [725.0, 4003.1111111111113], [724.0, 6304.5], [735.0, 8274.75], [733.0, 8186.0], [734.0, 8112.0], [731.0, 8354.666666666666], [730.0, 7182.75], [729.0, 5885.833333333334], [728.0, 8587.5], [719.0, 8193.5], [705.0, 8356.666666666666], [704.0, 8505.0], [707.0, 8208.5], [706.0, 8321.333333333334], [709.0, 8420.0], [708.0, 8438.75], [711.0, 8279.25], [710.0, 8437.666666666666], [718.0, 8139.333333333333], [717.0, 8202.0], [716.0, 8309.0], [715.0, 8209.333333333334], [714.0, 8259.666666666666], [713.0, 8445.0], [712.0, 8081.0], [727.0, 8202.0], [726.0, 8255.333333333334], [764.0, 6579.0], [767.0, 6771.666666666667], [753.0, 8147.5], [752.0, 5584.0], [755.0, 6705.6], [754.0, 5018.0], [757.0, 6817.333333333333], [756.0, 4649.0], [766.0, 7019.75], [765.0, 6967.333333333333], [763.0, 6361.5], [762.0, 7022.75], [761.0, 6830.0], [760.0, 6670.4], [751.0, 8030.0], [736.0, 8026.0], [738.0, 8231.333333333334], [737.0, 8181.666666666667], [740.0, 8549.0], [741.0, 7996.666666666667], [739.0, 6858.666666666667], [743.0, 8204.666666666666], [742.0, 8153.25], [750.0, 8240.5], [749.0, 8006.5], [748.0, 8180.0], [747.0, 8194.75], [746.0, 6734.0], [744.0, 8201.0], [745.0, 6236.666666666667], [759.0, 6435.5], [758.0, 5707.5], [792.0, 6302.5], [797.0, 3436.0], [798.0, 3450.25], [799.0, 2871.6666666666665], [785.0, 3536.6666666666665], [786.0, 5833.0], [784.0, 3556.0], [796.0, 3912.6666666666665], [795.0, 4184.0], [794.0, 3518.0], [793.0, 5875.5], [783.0, 5454.0], [769.0, 6053.5], [768.0, 7917.333333333333], [771.0, 6006.0], [770.0, 5225.75], [773.0, 4123.666666666667], [772.0, 7061.5], [775.0, 7357.166666666667], [774.0, 4248.0], [782.0, 3646.3333333333335], [780.0, 5322.0], [781.0, 8332.0], [779.0, 4464.0], [778.0, 5790.6], [777.0, 5756.0], [776.0, 6989.75], [790.0, 5218.0], [791.0, 3559.0], [789.0, 5286.0], [788.0, 5181.0], [787.0, 5226.0], [827.0, 3329.5], [803.0, 2583.0], [815.0, 3185.5], [814.0, 4033.5], [800.0, 3800.2], [802.0, 3279.0], [801.0, 3978.6666666666665], [813.0, 3956.75], [812.0, 3698.0], [811.0, 3960.25], [809.0, 4049.0], [808.0, 3679.5], [810.0, 3787.0], [830.0, 4027.4], [831.0, 3759.0], [829.0, 3696.0], [828.0, 3501.0], [826.0, 3371.5], [825.0, 2941.25], [824.0, 3786.75], [807.0, 4108.0], [805.0, 3943.0], [804.0, 3665.3333333333335], [806.0, 3793.0], [820.0, 3767.25], [821.0, 3593.0], [819.0, 3080.0], [818.0, 3861.6666666666665], [817.0, 4031.0], [823.0, 4129.0], [822.0, 3873.5], [816.0, 3700.6666666666665], [858.0, 2215.0], [862.0, 3846.0], [836.0, 3070.666666666667], [837.0, 3023.5], [835.0, 3916.5], [834.0, 3769.6666666666665], [833.0, 3803.5], [832.0, 3777.8], [847.0, 3679.5], [846.0, 2700.0], [839.0, 3744.3333333333335], [857.0, 2723.5], [856.0, 3683.6666666666665], [838.0, 2937.25], [863.0, 3706.5], [849.0, 2788.0], [848.0, 3657.0], [859.0, 4435.75], [860.0, 3960.0], [861.0, 3601.6666666666665], [855.0, 3707.0], [854.0, 3873.5], [853.0, 3912.0], [851.0, 3787.5], [852.0, 786.0], [850.0, 3771.0], [845.0, 3743.6666666666665], [843.0, 3720.6666666666665], [844.0, 3134.6666666666665], [842.0, 3674.6666666666665], [840.0, 3287.0], [841.0, 3745.0], [890.0, 3558.25], [883.0, 3600.5], [895.0, 3014.8], [880.0, 3885.0], [894.0, 2727.6666666666665], [893.0, 2136.0], [892.0, 2531.4], [891.0, 3463.5], [879.0, 2782.6666666666665], [867.0, 3515.0], [866.0, 3229.5], [869.0, 2487.0], [868.0, 3185.6666666666665], [864.0, 3675.3333333333335], [871.0, 3434.5], [888.0, 2717.5], [889.0, 3807.0], [870.0, 2598.333333333333], [878.0, 3640.75], [877.0, 3397.0], [876.0, 3118.3333333333335], [875.0, 3685.6], [872.0, 2113.0], [874.0, 3843.75], [873.0, 1758.0], [887.0, 2789.6666666666665], [886.0, 3414.0], [884.0, 3107.25], [885.0, 3844.5], [881.0, 2400.6], [882.0, 2151.6666666666665], [903.0, 2209.0], [909.0, 2984.0], [913.0, 2373.714285714286], [927.0, 627.0], [912.0, 1603.0], [915.0, 2765.0], [914.0, 2770.0], [917.0, 2812.6666666666665], [916.0, 3657.0], [919.0, 1981.0], [918.0, 1860.3333333333335], [921.0, 2331.25], [920.0, 2074.75], [923.0, 2219.5], [922.0, 2772.5], [925.0, 2263.0], [924.0, 3751.0], [926.0, 3145.6666666666665], [911.0, 3574.6666666666665], [910.0, 3229.0], [908.0, 2505.0], [907.0, 1724.0], [905.0, 3434.0], [906.0, 3732.0], [904.0, 3035.25], [900.0, 2482.6], [899.0, 3838.0], [898.0, 3647.0], [902.0, 3137.0], [901.0, 2735.0], [897.0, 3148.0], [896.0, 2612.3333333333335], [935.0, 3789.5], [958.0, 2378.5], [953.0, 2063.0], [954.0, 1974.6666666666665], [957.0, 1637.0], [956.0, 724.0], [955.0, 1942.0], [952.0, 2716.25], [934.0, 2024.0], [933.0, 2221.5], [932.0, 2214.0], [931.0, 1780.6], [930.0, 2786.5], [951.0, 2763.6666666666665], [950.0, 1082.0], [949.0, 4244.0], [948.0, 1409.0], [947.0, 3780.0], [929.0, 1414.3333333333333], [941.0, 2162.0], [940.0, 3686.0], [939.0, 2428.25], [938.0, 1611.0], [937.0, 2196.0], [936.0, 3685.0], [943.0, 3647.0], [928.0, 2457.25], [942.0, 2825.0], [959.0, 1136.0], [944.0, 2155.0], [946.0, 2530.0], [945.0, 2974.25], [985.0, 3280.0], [971.0, 1945.0], [970.0, 806.0], [969.0, 1837.0], [968.0, 1614.6666666666667], [972.0, 3411.6666666666665], [975.0, 1322.5], [960.0, 1956.5], [974.0, 1604.3333333333333], [964.0, 2905.3333333333335], [963.0, 1196.75], [962.0, 1216.5], [961.0, 2535.0], [981.0, 1883.0], [980.0, 2451.0], [979.0, 2004.25], [978.0, 1944.0], [976.0, 3099.6666666666665], [991.0, 1123.0], [990.0, 1644.0], [989.0, 1371.0], [986.0, 938.5], [988.0, 1648.0], [984.0, 1542.5], [966.0, 1358.75], [983.0, 2421.0], [982.0, 2453.0], [1020.0, 2029.5], [1022.0, 2576.6666666666665], [1021.0, 1766.6666666666665], [1023.0, 2834.0], [1008.0, 2860.0], [1009.0, 1596.0], [1019.0, 2565.75], [1018.0, 1319.8], [1016.0, 915.0], [999.0, 2267.3333333333335], [997.0, 1792.5], [996.0, 590.0], [995.0, 600.0], [994.0, 588.0], [998.0, 740.0], [993.0, 3182.0], [992.0, 2426.5], [1015.0, 2052.25], [1014.0, 1147.0], [1013.0, 1923.0], [1012.0, 2391.0], [1011.0, 652.0], [1010.0, 2459.5], [1007.0, 3324.0], [1006.0, 689.5], [1005.0, 1623.0], [1004.0, 3976.0], [1003.0, 2143.0], [1002.0, 855.5], [1001.0, 1699.0], [1000.0, 2241.5], [1028.0, 3036.0], [1050.0, 1930.5010080645159], [1024.0, 3304.428571428571], [1026.0, 1704.75], [1030.0, 623.0], [1032.0, 2125.0], [1034.0, 1839.75], [1036.0, 1650.75], [1038.0, 2153.1428571428573], [1048.0, 1823.0689655172416], [1046.0, 3387.0], [1044.0, 3332.8], [1042.0, 4399.333333333333], [1040.0, 2639.0], [1031.0, 2449.0], [1025.0, 1766.25], [1047.0, 1771.9047619047622], [1029.0, 1366.75], [1027.0, 1607.0], [1033.0, 2189.3333333333335], [1035.0, 1836.5], [1037.0, 1788.5714285714287], [1039.0, 1628.0], [1049.0, 2145.763157894737], [1045.0, 2065.666666666667], [1043.0, 2390.266666666667], [1041.0, 1603.75], [1.0, 499.0]], "isOverall": false, "label": "Compra de passagem aérea", "isController": false}, {"data": [[451.1692828146138, 5492.995940460089]], "isOverall": false, "label": "Compra de passagem aérea-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1050.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5798.25, "minX": 1.68571482E12, "maxY": 566483.9, "series": [{"data": [[1.68571482E12, 298574.7], [1.68571494E12, 268326.4666666667], [1.68571488E12, 566483.9]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68571482E12, 6298.166666666667], [1.68571494E12, 5798.25], [1.68571488E12, 12582.816666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68571494E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 320.03733333333327, "minX": 1.68571482E12, "maxY": 6990.62575647544, "series": [{"data": [[1.68571482E12, 536.9909090909092], [1.68571494E12, 320.03733333333327], [1.68571488E12, 454.2496210207174]], "isOverall": false, "label": "Passagem comprada com sucesso.", "isController": false}, {"data": [[1.68571482E12, 1090.2909319899252], [1.68571494E12, 5974.615798922781], [1.68571488E12, 6990.62575647544]], "isOverall": false, "label": "Compra de passagem aérea", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68571494E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 300.7022222222219, "minX": 1.68571482E12, "maxY": 6978.956669087388, "series": [{"data": [[1.68571482E12, 509.87342657342646], [1.68571494E12, 300.7022222222219], [1.68571488E12, 433.9110661950468]], "isOverall": false, "label": "Passagem comprada com sucesso.", "isController": false}, {"data": [[1.68571482E12, 1074.0056675062986], [1.68571494E12, 5962.556552962308], [1.68571488E12, 6978.956669087388]], "isOverall": false, "label": "Compra de passagem aérea", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68571494E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68571482E12, "maxY": 6507.623335754064, "series": [{"data": [[1.68571482E12, 0.0], [1.68571494E12, 0.0], [1.68571488E12, 0.0]], "isOverall": false, "label": "Passagem comprada com sucesso.", "isController": false}, {"data": [[1.68571482E12, 643.8028967254413], [1.68571494E12, 5617.38958707362], [1.68571488E12, 6507.623335754064]], "isOverall": false, "label": "Compra de passagem aérea", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68571494E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 279.0, "minX": 1.68571482E12, "maxY": 25056.0, "series": [{"data": [[1.68571482E12, 6191.0], [1.68571494E12, 22561.0], [1.68571488E12, 25056.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68571482E12, 2205.0], [1.68571494E12, 15879.0], [1.68571488E12, 16929.000000000007]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68571482E12, 3925.389999999999], [1.68571494E12, 22241.480000000003], [1.68571488E12, 23566.120000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68571482E12, 3113.699999999996], [1.68571494E12, 21799.45], [1.68571488E12, 18706.29999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68571482E12, 286.0], [1.68571494E12, 279.0], [1.68571488E12, 287.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68571482E12, 528.5], [1.68571494E12, 518.0], [1.68571488E12, 967.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68571494E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 294.0, "minX": 1.0, "maxY": 21948.0, "series": [{"data": [[7.0, 311.0], [8.0, 509.5], [9.0, 509.0], [10.0, 312.5], [14.0, 8143.5], [17.0, 319.0], [23.0, 321.0], [24.0, 549.0], [26.0, 422.0], [27.0, 1479.0], [30.0, 16198.0], [37.0, 524.0], [36.0, 504.5], [43.0, 507.0], [42.0, 509.5], [45.0, 474.0], [44.0, 503.5], [47.0, 358.0], [48.0, 398.5], [49.0, 519.0], [50.0, 600.5], [51.0, 546.0], [52.0, 520.5], [54.0, 505.0], [55.0, 329.0], [56.0, 506.5], [59.0, 514.0], [58.0, 474.5], [62.0, 339.0], [64.0, 505.5], [66.0, 503.0], [65.0, 503.0], [67.0, 510.0], [68.0, 509.5], [70.0, 487.5], [69.0, 501.5], [71.0, 413.0], [73.0, 521.5], [72.0, 523.0], [74.0, 516.5], [75.0, 365.0], [77.0, 512.0], [76.0, 508.5], [79.0, 515.5], [78.0, 505.0], [80.0, 9939.0], [82.0, 699.5], [84.0, 939.5], [85.0, 7677.0], [90.0, 726.0], [93.0, 826.0], [94.0, 549.0], [99.0, 631.0], [101.0, 3738.0], [103.0, 3948.0], [102.0, 7579.5], [117.0, 3676.0], [123.0, 613.0], [137.0, 612.0], [140.0, 419.0], [139.0, 6152.5], [155.0, 17798.0], [152.0, 1058.0], [158.0, 449.5], [157.0, 445.0], [165.0, 880.0], [164.0, 1879.5], [173.0, 2806.0], [176.0, 7625.0], [189.0, 691.0], [191.0, 15836.0], [192.0, 8332.0], [193.0, 21948.0], [200.0, 545.0], [213.0, 1359.5], [210.0, 15724.0], [221.0, 21873.0], [237.0, 636.0], [242.0, 500.5], [248.0, 676.5], [251.0, 17178.0], [269.0, 16204.0], [1.0, 294.0], [304.0, 2242.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 304.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 277.0, "minX": 1.0, "maxY": 21939.0, "series": [{"data": [[7.0, 291.0], [8.0, 498.0], [9.0, 498.0], [10.0, 294.0], [14.0, 8133.0], [17.0, 298.0], [23.0, 301.0], [24.0, 543.5], [26.0, 407.5], [27.0, 1473.0], [30.0, 16187.5], [37.0, 511.0], [36.0, 492.0], [43.0, 496.0], [42.0, 498.5], [45.0, 454.0], [44.0, 492.0], [47.0, 338.5], [48.0, 372.0], [49.0, 509.0], [50.0, 587.5], [51.0, 539.0], [52.0, 510.0], [54.0, 494.0], [55.0, 312.0], [56.0, 494.5], [59.0, 504.0], [58.0, 456.5], [62.0, 319.5], [64.0, 495.5], [66.0, 496.0], [65.0, 492.0], [67.0, 499.0], [68.0, 498.0], [70.0, 468.0], [69.0, 490.0], [71.0, 390.0], [73.0, 509.5], [72.0, 511.0], [74.0, 505.0], [75.0, 345.0], [77.0, 499.5], [76.0, 498.5], [79.0, 502.5], [78.0, 493.5], [80.0, 9928.5], [82.0, 674.0], [84.0, 919.5], [85.0, 7666.0], [90.0, 724.5], [93.0, 807.0], [94.0, 538.5], [99.0, 619.0], [101.0, 3706.0], [103.0, 3915.0], [102.0, 7567.5], [117.0, 3663.0], [123.0, 605.0], [137.0, 607.0], [140.0, 395.5], [139.0, 6132.0], [155.0, 17794.0], [152.0, 1045.5], [158.0, 440.5], [157.0, 428.0], [165.0, 861.5], [164.0, 1878.0], [173.0, 2805.0], [176.0, 7610.0], [189.0, 679.0], [191.0, 15825.0], [192.0, 8321.5], [193.0, 21939.0], [200.0, 533.0], [213.0, 1352.0], [210.0, 15709.0], [221.0, 21857.0], [237.0, 621.0], [242.0, 476.5], [248.0, 660.0], [251.0, 17169.0], [269.0, 16193.0], [1.0, 277.0], [304.0, 2222.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 304.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 37.233333333333334, "minX": 1.68571482E12, "maxY": 98.6, "series": [{"data": [[1.68571482E12, 62.9], [1.68571494E12, 37.233333333333334], [1.68571488E12, 98.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68571494E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 46.6, "minX": 1.68571482E12, "maxY": 101.83333333333333, "series": [{"data": [[1.68571482E12, 50.3], [1.68571494E12, 46.6], [1.68571488E12, 101.83333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68571494E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 18.75, "minX": 1.68571482E12, "maxY": 68.85, "series": [{"data": [[1.68571482E12, 23.833333333333332], [1.68571494E12, 18.75], [1.68571488E12, 32.983333333333334]], "isOverall": false, "label": "Passagem comprada com sucesso.-success", "isController": false}, {"data": [[1.68571482E12, 26.466666666666665], [1.68571494E12, 27.85], [1.68571488E12, 68.85]], "isOverall": false, "label": "Compra de passagem aérea-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68571494E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 46.6, "minX": 1.68571482E12, "maxY": 101.83333333333333, "series": [{"data": [[1.68571482E12, 50.3], [1.68571494E12, 46.6], [1.68571488E12, 101.83333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68571494E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

