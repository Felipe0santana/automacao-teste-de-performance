/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 273.0, "minX": 0.0, "maxY": 26433.0, "series": [{"data": [[0.0, 273.0], [0.1, 285.0], [0.2, 287.0], [0.3, 288.0], [0.4, 288.0], [0.5, 289.0], [0.6, 289.0], [0.7, 290.0], [0.8, 290.0], [0.9, 291.0], [1.0, 291.0], [1.1, 291.0], [1.2, 291.0], [1.3, 292.0], [1.4, 292.0], [1.5, 292.0], [1.6, 292.0], [1.7, 293.0], [1.8, 293.0], [1.9, 293.0], [2.0, 293.0], [2.1, 293.0], [2.2, 293.0], [2.3, 294.0], [2.4, 294.0], [2.5, 294.0], [2.6, 294.0], [2.7, 294.0], [2.8, 294.0], [2.9, 294.0], [3.0, 295.0], [3.1, 295.0], [3.2, 295.0], [3.3, 295.0], [3.4, 295.0], [3.5, 295.0], [3.6, 295.0], [3.7, 296.0], [3.8, 296.0], [3.9, 296.0], [4.0, 296.0], [4.1, 296.0], [4.2, 296.0], [4.3, 296.0], [4.4, 296.0], [4.5, 297.0], [4.6, 297.0], [4.7, 297.0], [4.8, 297.0], [4.9, 297.0], [5.0, 297.0], [5.1, 297.0], [5.2, 297.0], [5.3, 297.0], [5.4, 298.0], [5.5, 298.0], [5.6, 298.0], [5.7, 298.0], [5.8, 298.0], [5.9, 298.0], [6.0, 298.0], [6.1, 298.0], [6.2, 298.0], [6.3, 298.0], [6.4, 299.0], [6.5, 299.0], [6.6, 299.0], [6.7, 299.0], [6.8, 299.0], [6.9, 299.0], [7.0, 299.0], [7.1, 299.0], [7.2, 299.0], [7.3, 299.0], [7.4, 300.0], [7.5, 300.0], [7.6, 300.0], [7.7, 300.0], [7.8, 300.0], [7.9, 300.0], [8.0, 300.0], [8.1, 300.0], [8.2, 300.0], [8.3, 300.0], [8.4, 300.0], [8.5, 301.0], [8.6, 301.0], [8.7, 301.0], [8.8, 301.0], [8.9, 301.0], [9.0, 301.0], [9.1, 301.0], [9.2, 301.0], [9.3, 301.0], [9.4, 301.0], [9.5, 301.0], [9.6, 302.0], [9.7, 302.0], [9.8, 302.0], [9.9, 302.0], [10.0, 302.0], [10.1, 302.0], [10.2, 302.0], [10.3, 302.0], [10.4, 302.0], [10.5, 302.0], [10.6, 302.0], [10.7, 303.0], [10.8, 303.0], [10.9, 303.0], [11.0, 303.0], [11.1, 303.0], [11.2, 303.0], [11.3, 303.0], [11.4, 303.0], [11.5, 303.0], [11.6, 303.0], [11.7, 303.0], [11.8, 304.0], [11.9, 304.0], [12.0, 304.0], [12.1, 304.0], [12.2, 304.0], [12.3, 304.0], [12.4, 304.0], [12.5, 304.0], [12.6, 304.0], [12.7, 304.0], [12.8, 304.0], [12.9, 305.0], [13.0, 305.0], [13.1, 305.0], [13.2, 305.0], [13.3, 305.0], [13.4, 305.0], [13.5, 305.0], [13.6, 305.0], [13.7, 305.0], [13.8, 305.0], [13.9, 305.0], [14.0, 305.0], [14.1, 306.0], [14.2, 306.0], [14.3, 306.0], [14.4, 306.0], [14.5, 306.0], [14.6, 306.0], [14.7, 306.0], [14.8, 306.0], [14.9, 306.0], [15.0, 306.0], [15.1, 306.0], [15.2, 307.0], [15.3, 307.0], [15.4, 307.0], [15.5, 307.0], [15.6, 307.0], [15.7, 307.0], [15.8, 307.0], [15.9, 307.0], [16.0, 307.0], [16.1, 307.0], [16.2, 307.0], [16.3, 308.0], [16.4, 308.0], [16.5, 308.0], [16.6, 308.0], [16.7, 308.0], [16.8, 308.0], [16.9, 308.0], [17.0, 308.0], [17.1, 308.0], [17.2, 308.0], [17.3, 308.0], [17.4, 309.0], [17.5, 309.0], [17.6, 309.0], [17.7, 309.0], [17.8, 309.0], [17.9, 309.0], [18.0, 309.0], [18.1, 309.0], [18.2, 309.0], [18.3, 309.0], [18.4, 309.0], [18.5, 310.0], [18.6, 310.0], [18.7, 310.0], [18.8, 310.0], [18.9, 310.0], [19.0, 310.0], [19.1, 310.0], [19.2, 310.0], [19.3, 310.0], [19.4, 310.0], [19.5, 311.0], [19.6, 311.0], [19.7, 311.0], [19.8, 311.0], [19.9, 311.0], [20.0, 311.0], [20.1, 311.0], [20.2, 311.0], [20.3, 311.0], [20.4, 311.0], [20.5, 312.0], [20.6, 312.0], [20.7, 312.0], [20.8, 312.0], [20.9, 312.0], [21.0, 312.0], [21.1, 312.0], [21.2, 312.0], [21.3, 312.0], [21.4, 312.0], [21.5, 313.0], [21.6, 313.0], [21.7, 313.0], [21.8, 313.0], [21.9, 313.0], [22.0, 313.0], [22.1, 313.0], [22.2, 313.0], [22.3, 313.0], [22.4, 313.0], [22.5, 314.0], [22.6, 314.0], [22.7, 314.0], [22.8, 314.0], [22.9, 314.0], [23.0, 314.0], [23.1, 314.0], [23.2, 314.0], [23.3, 314.0], [23.4, 314.0], [23.5, 315.0], [23.6, 315.0], [23.7, 315.0], [23.8, 315.0], [23.9, 315.0], [24.0, 315.0], [24.1, 315.0], [24.2, 315.0], [24.3, 315.0], [24.4, 316.0], [24.5, 316.0], [24.6, 316.0], [24.7, 316.0], [24.8, 316.0], [24.9, 316.0], [25.0, 316.0], [25.1, 316.0], [25.2, 316.0], [25.3, 317.0], [25.4, 317.0], [25.5, 317.0], [25.6, 317.0], [25.7, 317.0], [25.8, 317.0], [25.9, 317.0], [26.0, 317.0], [26.1, 317.0], [26.2, 318.0], [26.3, 318.0], [26.4, 318.0], [26.5, 318.0], [26.6, 318.0], [26.7, 318.0], [26.8, 318.0], [26.9, 318.0], [27.0, 318.0], [27.1, 319.0], [27.2, 319.0], [27.3, 319.0], [27.4, 319.0], [27.5, 319.0], [27.6, 319.0], [27.7, 319.0], [27.8, 319.0], [27.9, 320.0], [28.0, 320.0], [28.1, 320.0], [28.2, 320.0], [28.3, 320.0], [28.4, 320.0], [28.5, 320.0], [28.6, 320.0], [28.7, 320.0], [28.8, 321.0], [28.9, 321.0], [29.0, 321.0], [29.1, 321.0], [29.2, 321.0], [29.3, 321.0], [29.4, 321.0], [29.5, 322.0], [29.6, 322.0], [29.7, 322.0], [29.8, 322.0], [29.9, 322.0], [30.0, 322.0], [30.1, 322.0], [30.2, 322.0], [30.3, 322.0], [30.4, 323.0], [30.5, 323.0], [30.6, 323.0], [30.7, 323.0], [30.8, 323.0], [30.9, 323.0], [31.0, 323.0], [31.1, 324.0], [31.2, 324.0], [31.3, 324.0], [31.4, 324.0], [31.5, 324.0], [31.6, 324.0], [31.7, 324.0], [31.8, 324.0], [31.9, 325.0], [32.0, 325.0], [32.1, 325.0], [32.2, 325.0], [32.3, 325.0], [32.4, 325.0], [32.5, 325.0], [32.6, 325.0], [32.7, 326.0], [32.8, 326.0], [32.9, 326.0], [33.0, 326.0], [33.1, 326.0], [33.2, 326.0], [33.3, 326.0], [33.4, 327.0], [33.5, 327.0], [33.6, 327.0], [33.7, 327.0], [33.8, 327.0], [33.9, 327.0], [34.0, 327.0], [34.1, 327.0], [34.2, 328.0], [34.3, 328.0], [34.4, 328.0], [34.5, 328.0], [34.6, 328.0], [34.7, 328.0], [34.8, 328.0], [34.9, 328.0], [35.0, 329.0], [35.1, 329.0], [35.2, 329.0], [35.3, 329.0], [35.4, 329.0], [35.5, 329.0], [35.6, 329.0], [35.7, 330.0], [35.8, 330.0], [35.9, 330.0], [36.0, 330.0], [36.1, 330.0], [36.2, 330.0], [36.3, 330.0], [36.4, 331.0], [36.5, 331.0], [36.6, 331.0], [36.7, 331.0], [36.8, 331.0], [36.9, 331.0], [37.0, 331.0], [37.1, 332.0], [37.2, 332.0], [37.3, 332.0], [37.4, 332.0], [37.5, 332.0], [37.6, 332.0], [37.7, 332.0], [37.8, 332.0], [37.9, 333.0], [38.0, 333.0], [38.1, 333.0], [38.2, 333.0], [38.3, 333.0], [38.4, 333.0], [38.5, 333.0], [38.6, 334.0], [38.7, 334.0], [38.8, 334.0], [38.9, 334.0], [39.0, 334.0], [39.1, 334.0], [39.2, 334.0], [39.3, 335.0], [39.4, 335.0], [39.5, 335.0], [39.6, 335.0], [39.7, 335.0], [39.8, 335.0], [39.9, 335.0], [40.0, 335.0], [40.1, 336.0], [40.2, 336.0], [40.3, 336.0], [40.4, 336.0], [40.5, 336.0], [40.6, 336.0], [40.7, 336.0], [40.8, 337.0], [40.9, 337.0], [41.0, 337.0], [41.1, 337.0], [41.2, 337.0], [41.3, 337.0], [41.4, 338.0], [41.5, 338.0], [41.6, 338.0], [41.7, 338.0], [41.8, 338.0], [41.9, 338.0], [42.0, 338.0], [42.1, 339.0], [42.2, 339.0], [42.3, 339.0], [42.4, 339.0], [42.5, 339.0], [42.6, 339.0], [42.7, 339.0], [42.8, 339.0], [42.9, 340.0], [43.0, 340.0], [43.1, 340.0], [43.2, 340.0], [43.3, 340.0], [43.4, 340.0], [43.5, 340.0], [43.6, 341.0], [43.7, 341.0], [43.8, 341.0], [43.9, 341.0], [44.0, 341.0], [44.1, 341.0], [44.2, 342.0], [44.3, 342.0], [44.4, 342.0], [44.5, 342.0], [44.6, 342.0], [44.7, 342.0], [44.8, 342.0], [44.9, 343.0], [45.0, 343.0], [45.1, 343.0], [45.2, 343.0], [45.3, 343.0], [45.4, 343.0], [45.5, 343.0], [45.6, 344.0], [45.7, 344.0], [45.8, 344.0], [45.9, 344.0], [46.0, 344.0], [46.1, 344.0], [46.2, 345.0], [46.3, 345.0], [46.4, 345.0], [46.5, 345.0], [46.6, 345.0], [46.7, 345.0], [46.8, 346.0], [46.9, 346.0], [47.0, 346.0], [47.1, 346.0], [47.2, 346.0], [47.3, 346.0], [47.4, 347.0], [47.5, 347.0], [47.6, 347.0], [47.7, 347.0], [47.8, 347.0], [47.9, 347.0], [48.0, 347.0], [48.1, 348.0], [48.2, 348.0], [48.3, 348.0], [48.4, 348.0], [48.5, 348.0], [48.6, 348.0], [48.7, 349.0], [48.8, 349.0], [48.9, 349.0], [49.0, 349.0], [49.1, 349.0], [49.2, 349.0], [49.3, 350.0], [49.4, 350.0], [49.5, 350.0], [49.6, 350.0], [49.7, 350.0], [49.8, 350.0], [49.9, 351.0], [50.0, 351.0], [50.1, 351.0], [50.2, 351.0], [50.3, 351.0], [50.4, 351.0], [50.5, 352.0], [50.6, 352.0], [50.7, 352.0], [50.8, 352.0], [50.9, 352.0], [51.0, 352.0], [51.1, 353.0], [51.2, 353.0], [51.3, 353.0], [51.4, 353.0], [51.5, 353.0], [51.6, 353.0], [51.7, 354.0], [51.8, 354.0], [51.9, 354.0], [52.0, 354.0], [52.1, 354.0], [52.2, 355.0], [52.3, 355.0], [52.4, 355.0], [52.5, 355.0], [52.6, 355.0], [52.7, 355.0], [52.8, 356.0], [52.9, 356.0], [53.0, 356.0], [53.1, 356.0], [53.2, 356.0], [53.3, 356.0], [53.4, 357.0], [53.5, 357.0], [53.6, 357.0], [53.7, 357.0], [53.8, 357.0], [53.9, 358.0], [54.0, 358.0], [54.1, 358.0], [54.2, 358.0], [54.3, 358.0], [54.4, 358.0], [54.5, 359.0], [54.6, 359.0], [54.7, 359.0], [54.8, 359.0], [54.9, 359.0], [55.0, 360.0], [55.1, 360.0], [55.2, 360.0], [55.3, 360.0], [55.4, 360.0], [55.5, 360.0], [55.6, 361.0], [55.7, 361.0], [55.8, 361.0], [55.9, 361.0], [56.0, 361.0], [56.1, 362.0], [56.2, 362.0], [56.3, 362.0], [56.4, 362.0], [56.5, 362.0], [56.6, 363.0], [56.7, 363.0], [56.8, 363.0], [56.9, 363.0], [57.0, 363.0], [57.1, 364.0], [57.2, 364.0], [57.3, 364.0], [57.4, 364.0], [57.5, 364.0], [57.6, 365.0], [57.7, 365.0], [57.8, 365.0], [57.9, 365.0], [58.0, 365.0], [58.1, 366.0], [58.2, 366.0], [58.3, 366.0], [58.4, 366.0], [58.5, 366.0], [58.6, 367.0], [58.7, 367.0], [58.8, 367.0], [58.9, 367.0], [59.0, 367.0], [59.1, 368.0], [59.2, 368.0], [59.3, 368.0], [59.4, 368.0], [59.5, 369.0], [59.6, 369.0], [59.7, 369.0], [59.8, 369.0], [59.9, 369.0], [60.0, 370.0], [60.1, 370.0], [60.2, 370.0], [60.3, 370.0], [60.4, 370.0], [60.5, 371.0], [60.6, 371.0], [60.7, 371.0], [60.8, 371.0], [60.9, 372.0], [61.0, 372.0], [61.1, 372.0], [61.2, 372.0], [61.3, 372.0], [61.4, 373.0], [61.5, 373.0], [61.6, 373.0], [61.7, 373.0], [61.8, 374.0], [61.9, 374.0], [62.0, 374.0], [62.1, 374.0], [62.2, 374.0], [62.3, 375.0], [62.4, 375.0], [62.5, 375.0], [62.6, 375.0], [62.7, 376.0], [62.8, 376.0], [62.9, 376.0], [63.0, 376.0], [63.1, 377.0], [63.2, 377.0], [63.3, 377.0], [63.4, 377.0], [63.5, 378.0], [63.6, 378.0], [63.7, 378.0], [63.8, 378.0], [63.9, 379.0], [64.0, 379.0], [64.1, 379.0], [64.2, 379.0], [64.3, 380.0], [64.4, 380.0], [64.5, 380.0], [64.6, 380.0], [64.7, 381.0], [64.8, 381.0], [64.9, 381.0], [65.0, 381.0], [65.1, 382.0], [65.2, 382.0], [65.3, 382.0], [65.4, 382.0], [65.5, 383.0], [65.6, 383.0], [65.7, 383.0], [65.8, 384.0], [65.9, 384.0], [66.0, 384.0], [66.1, 384.0], [66.2, 385.0], [66.3, 385.0], [66.4, 385.0], [66.5, 385.0], [66.6, 386.0], [66.7, 386.0], [66.8, 386.0], [66.9, 386.0], [67.0, 387.0], [67.1, 387.0], [67.2, 387.0], [67.3, 388.0], [67.4, 388.0], [67.5, 388.0], [67.6, 388.0], [67.7, 389.0], [67.8, 389.0], [67.9, 389.0], [68.0, 390.0], [68.1, 390.0], [68.2, 390.0], [68.3, 391.0], [68.4, 391.0], [68.5, 391.0], [68.6, 391.0], [68.7, 392.0], [68.8, 392.0], [68.9, 392.0], [69.0, 393.0], [69.1, 393.0], [69.2, 393.0], [69.3, 394.0], [69.4, 394.0], [69.5, 394.0], [69.6, 395.0], [69.7, 395.0], [69.8, 395.0], [69.9, 396.0], [70.0, 396.0], [70.1, 396.0], [70.2, 396.0], [70.3, 397.0], [70.4, 397.0], [70.5, 397.0], [70.6, 398.0], [70.7, 398.0], [70.8, 398.0], [70.9, 399.0], [71.0, 399.0], [71.1, 399.0], [71.2, 400.0], [71.3, 400.0], [71.4, 400.0], [71.5, 401.0], [71.6, 401.0], [71.7, 401.0], [71.8, 402.0], [71.9, 402.0], [72.0, 402.0], [72.1, 403.0], [72.2, 403.0], [72.3, 403.0], [72.4, 404.0], [72.5, 404.0], [72.6, 404.0], [72.7, 405.0], [72.8, 405.0], [72.9, 405.0], [73.0, 406.0], [73.1, 406.0], [73.2, 406.0], [73.3, 407.0], [73.4, 407.0], [73.5, 407.0], [73.6, 408.0], [73.7, 408.0], [73.8, 409.0], [73.9, 409.0], [74.0, 409.0], [74.1, 410.0], [74.2, 410.0], [74.3, 411.0], [74.4, 411.0], [74.5, 411.0], [74.6, 412.0], [74.7, 412.0], [74.8, 413.0], [74.9, 413.0], [75.0, 413.0], [75.1, 414.0], [75.2, 414.0], [75.3, 415.0], [75.4, 415.0], [75.5, 415.0], [75.6, 416.0], [75.7, 416.0], [75.8, 417.0], [75.9, 417.0], [76.0, 417.0], [76.1, 418.0], [76.2, 418.0], [76.3, 419.0], [76.4, 419.0], [76.5, 420.0], [76.6, 420.0], [76.7, 421.0], [76.8, 421.0], [76.9, 421.0], [77.0, 422.0], [77.1, 422.0], [77.2, 423.0], [77.3, 423.0], [77.4, 424.0], [77.5, 424.0], [77.6, 425.0], [77.7, 425.0], [77.8, 426.0], [77.9, 426.0], [78.0, 426.0], [78.1, 427.0], [78.2, 427.0], [78.3, 428.0], [78.4, 428.0], [78.5, 429.0], [78.6, 429.0], [78.7, 430.0], [78.8, 430.0], [78.9, 431.0], [79.0, 431.0], [79.1, 432.0], [79.2, 432.0], [79.3, 433.0], [79.4, 434.0], [79.5, 434.0], [79.6, 435.0], [79.7, 435.0], [79.8, 436.0], [79.9, 436.0], [80.0, 437.0], [80.1, 437.0], [80.2, 438.0], [80.3, 438.0], [80.4, 439.0], [80.5, 439.0], [80.6, 440.0], [80.7, 440.0], [80.8, 441.0], [80.9, 442.0], [81.0, 442.0], [81.1, 443.0], [81.2, 443.0], [81.3, 444.0], [81.4, 445.0], [81.5, 445.0], [81.6, 446.0], [81.7, 446.0], [81.8, 447.0], [81.9, 448.0], [82.0, 448.0], [82.1, 449.0], [82.2, 449.0], [82.3, 450.0], [82.4, 451.0], [82.5, 451.0], [82.6, 452.0], [82.7, 453.0], [82.8, 453.0], [82.9, 454.0], [83.0, 455.0], [83.1, 455.0], [83.2, 456.0], [83.3, 457.0], [83.4, 457.0], [83.5, 458.0], [83.6, 459.0], [83.7, 459.0], [83.8, 460.0], [83.9, 461.0], [84.0, 462.0], [84.1, 462.0], [84.2, 463.0], [84.3, 464.0], [84.4, 464.0], [84.5, 465.0], [84.6, 466.0], [84.7, 467.0], [84.8, 468.0], [84.9, 468.0], [85.0, 469.0], [85.1, 470.0], [85.2, 471.0], [85.3, 472.0], [85.4, 473.0], [85.5, 473.0], [85.6, 474.0], [85.7, 475.0], [85.8, 476.0], [85.9, 477.0], [86.0, 478.0], [86.1, 479.0], [86.2, 480.0], [86.3, 481.0], [86.4, 482.0], [86.5, 482.0], [86.6, 483.0], [86.7, 484.0], [86.8, 485.0], [86.9, 486.0], [87.0, 487.0], [87.1, 488.0], [87.2, 489.0], [87.3, 490.0], [87.4, 491.0], [87.5, 492.0], [87.6, 493.0], [87.7, 494.0], [87.8, 495.0], [87.9, 496.0], [88.0, 497.0], [88.1, 498.0], [88.2, 500.0], [88.3, 501.0], [88.4, 502.0], [88.5, 503.0], [88.6, 504.0], [88.7, 505.0], [88.8, 506.0], [88.9, 508.0], [89.0, 509.0], [89.1, 510.0], [89.2, 511.0], [89.3, 513.0], [89.4, 514.0], [89.5, 515.0], [89.6, 517.0], [89.7, 518.0], [89.8, 520.0], [89.9, 521.0], [90.0, 522.0], [90.1, 524.0], [90.2, 525.0], [90.3, 526.0], [90.4, 528.0], [90.5, 529.0], [90.6, 531.0], [90.7, 533.0], [90.8, 534.0], [90.9, 536.0], [91.0, 538.0], [91.1, 539.0], [91.2, 541.0], [91.3, 543.0], [91.4, 545.0], [91.5, 546.0], [91.6, 548.0], [91.7, 550.0], [91.8, 552.0], [91.9, 554.0], [92.0, 555.0], [92.1, 557.0], [92.2, 559.0], [92.3, 561.0], [92.4, 563.0], [92.5, 565.0], [92.6, 567.0], [92.7, 569.0], [92.8, 571.0], [92.9, 573.0], [93.0, 575.0], [93.1, 578.0], [93.2, 580.0], [93.3, 583.0], [93.4, 585.0], [93.5, 588.0], [93.6, 590.0], [93.7, 593.0], [93.8, 595.0], [93.9, 598.0], [94.0, 601.0], [94.1, 604.0], [94.2, 607.0], [94.3, 610.0], [94.4, 613.0], [94.5, 616.0], [94.6, 619.0], [94.7, 622.0], [94.8, 625.0], [94.9, 628.0], [95.0, 631.0], [95.1, 635.0], [95.2, 638.0], [95.3, 642.0], [95.4, 645.0], [95.5, 649.0], [95.6, 653.0], [95.7, 657.0], [95.8, 661.0], [95.9, 666.0], [96.0, 670.0], [96.1, 674.0], [96.2, 679.0], [96.3, 683.0], [96.4, 688.0], [96.5, 694.0], [96.6, 699.0], [96.7, 705.0], [96.8, 711.0], [96.9, 716.0], [97.0, 723.0], [97.1, 729.0], [97.2, 735.0], [97.3, 742.0], [97.4, 749.0], [97.5, 755.0], [97.6, 763.0], [97.7, 770.0], [97.8, 778.0], [97.9, 787.0], [98.0, 796.0], [98.1, 805.0], [98.2, 814.0], [98.3, 826.0], [98.4, 839.0], [98.5, 852.0], [98.6, 865.0], [98.7, 882.0], [98.8, 899.0], [98.9, 919.0], [99.0, 938.0], [99.1, 957.0], [99.2, 984.0], [99.3, 1013.0], [99.4, 1051.0], [99.5, 1093.0], [99.6, 1148.0], [99.7, 1229.0], [99.8, 1325.0], [99.9, 1494.0], [100.0, 2941.0]], "isOverall": false, "label": "Passagem comprada com sucesso.", "isController": false}, {"data": [[0.0, 493.0], [0.1, 509.0], [0.2, 512.0], [0.3, 515.0], [0.4, 517.0], [0.5, 518.0], [0.6, 520.0], [0.7, 521.0], [0.8, 522.0], [0.9, 523.0], [1.0, 524.0], [1.1, 525.0], [1.2, 526.0], [1.3, 527.0], [1.4, 528.0], [1.5, 529.0], [1.6, 529.0], [1.7, 530.0], [1.8, 531.0], [1.9, 532.0], [2.0, 532.0], [2.1, 533.0], [2.2, 534.0], [2.3, 535.0], [2.4, 535.0], [2.5, 536.0], [2.6, 537.0], [2.7, 537.0], [2.8, 538.0], [2.9, 538.0], [3.0, 539.0], [3.1, 540.0], [3.2, 540.0], [3.3, 541.0], [3.4, 541.0], [3.5, 542.0], [3.6, 542.0], [3.7, 543.0], [3.8, 543.0], [3.9, 544.0], [4.0, 545.0], [4.1, 545.0], [4.2, 546.0], [4.3, 546.0], [4.4, 547.0], [4.5, 547.0], [4.6, 548.0], [4.7, 548.0], [4.8, 549.0], [4.9, 549.0], [5.0, 550.0], [5.1, 550.0], [5.2, 551.0], [5.3, 551.0], [5.4, 552.0], [5.5, 553.0], [5.6, 553.0], [5.7, 553.0], [5.8, 554.0], [5.9, 554.0], [6.0, 555.0], [6.1, 555.0], [6.2, 556.0], [6.3, 556.0], [6.4, 557.0], [6.5, 557.0], [6.6, 558.0], [6.7, 558.0], [6.8, 559.0], [6.9, 559.0], [7.0, 560.0], [7.1, 560.0], [7.2, 561.0], [7.3, 561.0], [7.4, 562.0], [7.5, 562.0], [7.6, 563.0], [7.7, 563.0], [7.8, 563.0], [7.9, 564.0], [8.0, 564.0], [8.1, 565.0], [8.2, 565.0], [8.3, 566.0], [8.4, 566.0], [8.5, 567.0], [8.6, 567.0], [8.7, 568.0], [8.8, 568.0], [8.9, 569.0], [9.0, 569.0], [9.1, 570.0], [9.2, 570.0], [9.3, 570.0], [9.4, 571.0], [9.5, 572.0], [9.6, 572.0], [9.7, 572.0], [9.8, 573.0], [9.9, 573.0], [10.0, 574.0], [10.1, 574.0], [10.2, 575.0], [10.3, 575.0], [10.4, 576.0], [10.5, 576.0], [10.6, 576.0], [10.7, 577.0], [10.8, 577.0], [10.9, 578.0], [11.0, 578.0], [11.1, 579.0], [11.2, 579.0], [11.3, 580.0], [11.4, 580.0], [11.5, 580.0], [11.6, 581.0], [11.7, 581.0], [11.8, 582.0], [11.9, 582.0], [12.0, 583.0], [12.1, 583.0], [12.2, 584.0], [12.3, 584.0], [12.4, 585.0], [12.5, 585.0], [12.6, 586.0], [12.7, 586.0], [12.8, 587.0], [12.9, 587.0], [13.0, 588.0], [13.1, 588.0], [13.2, 588.0], [13.3, 589.0], [13.4, 589.0], [13.5, 590.0], [13.6, 590.0], [13.7, 591.0], [13.8, 591.0], [13.9, 592.0], [14.0, 592.0], [14.1, 592.0], [14.2, 593.0], [14.3, 593.0], [14.4, 594.0], [14.5, 594.0], [14.6, 595.0], [14.7, 595.0], [14.8, 596.0], [14.9, 596.0], [15.0, 597.0], [15.1, 597.0], [15.2, 598.0], [15.3, 598.0], [15.4, 599.0], [15.5, 599.0], [15.6, 599.0], [15.7, 600.0], [15.8, 600.0], [15.9, 601.0], [16.0, 601.0], [16.1, 602.0], [16.2, 602.0], [16.3, 603.0], [16.4, 603.0], [16.5, 604.0], [16.6, 604.0], [16.7, 605.0], [16.8, 605.0], [16.9, 606.0], [17.0, 606.0], [17.1, 607.0], [17.2, 607.0], [17.3, 608.0], [17.4, 608.0], [17.5, 609.0], [17.6, 609.0], [17.7, 610.0], [17.8, 610.0], [17.9, 611.0], [18.0, 611.0], [18.1, 612.0], [18.2, 612.0], [18.3, 613.0], [18.4, 613.0], [18.5, 614.0], [18.6, 614.0], [18.7, 615.0], [18.8, 616.0], [18.9, 616.0], [19.0, 617.0], [19.1, 617.0], [19.2, 618.0], [19.3, 618.0], [19.4, 619.0], [19.5, 619.0], [19.6, 620.0], [19.7, 620.0], [19.8, 621.0], [19.9, 622.0], [20.0, 622.0], [20.1, 623.0], [20.2, 623.0], [20.3, 624.0], [20.4, 624.0], [20.5, 625.0], [20.6, 626.0], [20.7, 626.0], [20.8, 627.0], [20.9, 627.0], [21.0, 628.0], [21.1, 629.0], [21.2, 629.0], [21.3, 630.0], [21.4, 630.0], [21.5, 631.0], [21.6, 632.0], [21.7, 632.0], [21.8, 633.0], [21.9, 634.0], [22.0, 634.0], [22.1, 635.0], [22.2, 635.0], [22.3, 636.0], [22.4, 637.0], [22.5, 637.0], [22.6, 638.0], [22.7, 639.0], [22.8, 639.0], [22.9, 640.0], [23.0, 641.0], [23.1, 641.0], [23.2, 642.0], [23.3, 643.0], [23.4, 643.0], [23.5, 644.0], [23.6, 645.0], [23.7, 645.0], [23.8, 646.0], [23.9, 647.0], [24.0, 647.0], [24.1, 648.0], [24.2, 649.0], [24.3, 649.0], [24.4, 650.0], [24.5, 651.0], [24.6, 651.0], [24.7, 652.0], [24.8, 653.0], [24.9, 654.0], [25.0, 654.0], [25.1, 655.0], [25.2, 656.0], [25.3, 657.0], [25.4, 657.0], [25.5, 658.0], [25.6, 659.0], [25.7, 660.0], [25.8, 660.0], [25.9, 661.0], [26.0, 662.0], [26.1, 663.0], [26.2, 664.0], [26.3, 664.0], [26.4, 665.0], [26.5, 666.0], [26.6, 667.0], [26.7, 668.0], [26.8, 669.0], [26.9, 669.0], [27.0, 670.0], [27.1, 671.0], [27.2, 672.0], [27.3, 673.0], [27.4, 673.0], [27.5, 674.0], [27.6, 675.0], [27.7, 676.0], [27.8, 677.0], [27.9, 678.0], [28.0, 679.0], [28.1, 680.0], [28.2, 680.0], [28.3, 681.0], [28.4, 682.0], [28.5, 683.0], [28.6, 684.0], [28.7, 685.0], [28.8, 686.0], [28.9, 687.0], [29.0, 688.0], [29.1, 689.0], [29.2, 690.0], [29.3, 692.0], [29.4, 693.0], [29.5, 694.0], [29.6, 695.0], [29.7, 696.0], [29.8, 697.0], [29.9, 698.0], [30.0, 700.0], [30.1, 701.0], [30.2, 702.0], [30.3, 703.0], [30.4, 704.0], [30.5, 705.0], [30.6, 707.0], [30.7, 708.0], [30.8, 709.0], [30.9, 711.0], [31.0, 712.0], [31.1, 713.0], [31.2, 715.0], [31.3, 716.0], [31.4, 717.0], [31.5, 719.0], [31.6, 720.0], [31.7, 721.0], [31.8, 723.0], [31.9, 724.0], [32.0, 726.0], [32.1, 727.0], [32.2, 729.0], [32.3, 730.0], [32.4, 732.0], [32.5, 733.0], [32.6, 735.0], [32.7, 737.0], [32.8, 739.0], [32.9, 740.0], [33.0, 742.0], [33.1, 743.0], [33.2, 745.0], [33.3, 747.0], [33.4, 749.0], [33.5, 751.0], [33.6, 753.0], [33.7, 755.0], [33.8, 757.0], [33.9, 759.0], [34.0, 761.0], [34.1, 763.0], [34.2, 766.0], [34.3, 768.0], [34.4, 771.0], [34.5, 773.0], [34.6, 776.0], [34.7, 778.0], [34.8, 781.0], [34.9, 783.0], [35.0, 786.0], [35.1, 789.0], [35.2, 792.0], [35.3, 795.0], [35.4, 798.0], [35.5, 801.0], [35.6, 804.0], [35.7, 807.0], [35.8, 810.0], [35.9, 813.0], [36.0, 816.0], [36.1, 820.0], [36.2, 823.0], [36.3, 827.0], [36.4, 831.0], [36.5, 835.0], [36.6, 839.0], [36.7, 844.0], [36.8, 849.0], [36.9, 854.0], [37.0, 859.0], [37.1, 864.0], [37.2, 869.0], [37.3, 875.0], [37.4, 881.0], [37.5, 886.0], [37.6, 892.0], [37.7, 899.0], [37.8, 906.0], [37.9, 912.0], [38.0, 920.0], [38.1, 928.0], [38.2, 938.0], [38.3, 945.0], [38.4, 956.0], [38.5, 968.0], [38.6, 980.0], [38.7, 991.0], [38.8, 1004.0], [38.9, 1018.0], [39.0, 1034.0], [39.1, 1049.0], [39.2, 1066.0], [39.3, 1089.0], [39.4, 1109.0], [39.5, 1137.0], [39.6, 1171.0], [39.7, 1206.0], [39.8, 1263.0], [39.9, 1343.0], [40.0, 1452.0], [40.1, 1515.0], [40.2, 1520.0], [40.3, 1524.0], [40.4, 1527.0], [40.5, 1529.0], [40.6, 1531.0], [40.7, 1533.0], [40.8, 1534.0], [40.9, 1536.0], [41.0, 1537.0], [41.1, 1539.0], [41.2, 1540.0], [41.3, 1541.0], [41.4, 1543.0], [41.5, 1544.0], [41.6, 1545.0], [41.7, 1546.0], [41.8, 1547.0], [41.9, 1548.0], [42.0, 1549.0], [42.1, 1550.0], [42.2, 1551.0], [42.3, 1552.0], [42.4, 1553.0], [42.5, 1554.0], [42.6, 1556.0], [42.7, 1556.0], [42.8, 1557.0], [42.9, 1558.0], [43.0, 1559.0], [43.1, 1560.0], [43.2, 1561.0], [43.3, 1562.0], [43.4, 1563.0], [43.5, 1564.0], [43.6, 1565.0], [43.7, 1565.0], [43.8, 1566.0], [43.9, 1567.0], [44.0, 1568.0], [44.1, 1569.0], [44.2, 1569.0], [44.3, 1570.0], [44.4, 1571.0], [44.5, 1572.0], [44.6, 1573.0], [44.7, 1574.0], [44.8, 1575.0], [44.9, 1575.0], [45.0, 1576.0], [45.1, 1577.0], [45.2, 1578.0], [45.3, 1579.0], [45.4, 1580.0], [45.5, 1581.0], [45.6, 1581.0], [45.7, 1582.0], [45.8, 1583.0], [45.9, 1584.0], [46.0, 1585.0], [46.1, 1586.0], [46.2, 1587.0], [46.3, 1588.0], [46.4, 1589.0], [46.5, 1590.0], [46.6, 1591.0], [46.7, 1592.0], [46.8, 1592.0], [46.9, 1593.0], [47.0, 1594.0], [47.1, 1595.0], [47.2, 1596.0], [47.3, 1597.0], [47.4, 1598.0], [47.5, 1599.0], [47.6, 1600.0], [47.7, 1601.0], [47.8, 1601.0], [47.9, 1602.0], [48.0, 1603.0], [48.1, 1604.0], [48.2, 1605.0], [48.3, 1606.0], [48.4, 1607.0], [48.5, 1608.0], [48.6, 1609.0], [48.7, 1610.0], [48.8, 1611.0], [48.9, 1612.0], [49.0, 1613.0], [49.1, 1613.0], [49.2, 1614.0], [49.3, 1615.0], [49.4, 1616.0], [49.5, 1617.0], [49.6, 1618.0], [49.7, 1619.0], [49.8, 1620.0], [49.9, 1621.0], [50.0, 1622.0], [50.1, 1623.0], [50.2, 1624.0], [50.3, 1625.0], [50.4, 1626.0], [50.5, 1627.0], [50.6, 1628.0], [50.7, 1630.0], [50.8, 1631.0], [50.9, 1632.0], [51.0, 1633.0], [51.1, 1634.0], [51.2, 1636.0], [51.3, 1637.0], [51.4, 1638.0], [51.5, 1639.0], [51.6, 1640.0], [51.7, 1641.0], [51.8, 1642.0], [51.9, 1643.0], [52.0, 1645.0], [52.1, 1646.0], [52.2, 1647.0], [52.3, 1649.0], [52.4, 1650.0], [52.5, 1651.0], [52.6, 1653.0], [52.7, 1654.0], [52.8, 1656.0], [52.9, 1657.0], [53.0, 1659.0], [53.1, 1660.0], [53.2, 1661.0], [53.3, 1663.0], [53.4, 1665.0], [53.5, 1666.0], [53.6, 1668.0], [53.7, 1669.0], [53.8, 1671.0], [53.9, 1672.0], [54.0, 1674.0], [54.1, 1676.0], [54.2, 1677.0], [54.3, 1679.0], [54.4, 1681.0], [54.5, 1683.0], [54.6, 1685.0], [54.7, 1687.0], [54.8, 1688.0], [54.9, 1690.0], [55.0, 1692.0], [55.1, 1694.0], [55.2, 1696.0], [55.3, 1698.0], [55.4, 1700.0], [55.5, 1702.0], [55.6, 1704.0], [55.7, 1707.0], [55.8, 1709.0], [55.9, 1712.0], [56.0, 1714.0], [56.1, 1717.0], [56.2, 1720.0], [56.3, 1723.0], [56.4, 1725.0], [56.5, 1728.0], [56.6, 1731.0], [56.7, 1734.0], [56.8, 1737.0], [56.9, 1740.0], [57.0, 1744.0], [57.1, 1748.0], [57.2, 1751.0], [57.3, 1755.0], [57.4, 1759.0], [57.5, 1763.0], [57.6, 1767.0], [57.7, 1770.0], [57.8, 1774.0], [57.9, 1780.0], [58.0, 1785.0], [58.1, 1791.0], [58.2, 1795.0], [58.3, 1800.0], [58.4, 1806.0], [58.5, 1812.0], [58.6, 1820.0], [58.7, 1827.0], [58.8, 1834.0], [58.9, 1841.0], [59.0, 1848.0], [59.1, 1857.0], [59.2, 1868.0], [59.3, 1876.0], [59.4, 1888.0], [59.5, 1899.0], [59.6, 1911.0], [59.7, 1925.0], [59.8, 1941.0], [59.9, 1961.0], [60.0, 1981.0], [60.1, 2005.0], [60.2, 2028.0], [60.3, 2053.0], [60.4, 2086.0], [60.5, 2124.0], [60.6, 2172.0], [60.7, 2234.0], [60.8, 2317.0], [60.9, 2443.0], [61.0, 2685.0], [61.1, 3113.0], [61.2, 3524.0], [61.3, 3534.0], [61.4, 3539.0], [61.5, 3543.0], [61.6, 3547.0], [61.7, 3550.0], [61.8, 3553.0], [61.9, 3555.0], [62.0, 3558.0], [62.1, 3560.0], [62.2, 3562.0], [62.3, 3564.0], [62.4, 3566.0], [62.5, 3568.0], [62.6, 3570.0], [62.7, 3572.0], [62.8, 3574.0], [62.9, 3575.0], [63.0, 3577.0], [63.1, 3579.0], [63.2, 3580.0], [63.3, 3582.0], [63.4, 3584.0], [63.5, 3585.0], [63.6, 3587.0], [63.7, 3588.0], [63.8, 3590.0], [63.9, 3592.0], [64.0, 3593.0], [64.1, 3595.0], [64.2, 3596.0], [64.3, 3598.0], [64.4, 3600.0], [64.5, 3601.0], [64.6, 3603.0], [64.7, 3604.0], [64.8, 3606.0], [64.9, 3607.0], [65.0, 3609.0], [65.1, 3610.0], [65.2, 3612.0], [65.3, 3613.0], [65.4, 3614.0], [65.5, 3616.0], [65.6, 3617.0], [65.7, 3619.0], [65.8, 3620.0], [65.9, 3622.0], [66.0, 3623.0], [66.1, 3625.0], [66.2, 3626.0], [66.3, 3628.0], [66.4, 3630.0], [66.5, 3631.0], [66.6, 3633.0], [66.7, 3634.0], [66.8, 3636.0], [66.9, 3638.0], [67.0, 3640.0], [67.1, 3641.0], [67.2, 3643.0], [67.3, 3645.0], [67.4, 3647.0], [67.5, 3649.0], [67.6, 3651.0], [67.7, 3653.0], [67.8, 3655.0], [67.9, 3657.0], [68.0, 3659.0], [68.1, 3660.0], [68.2, 3663.0], [68.3, 3665.0], [68.4, 3667.0], [68.5, 3669.0], [68.6, 3671.0], [68.7, 3673.0], [68.8, 3675.0], [68.9, 3677.0], [69.0, 3679.0], [69.1, 3682.0], [69.2, 3684.0], [69.3, 3686.0], [69.4, 3689.0], [69.5, 3691.0], [69.6, 3694.0], [69.7, 3696.0], [69.8, 3699.0], [69.9, 3702.0], [70.0, 3705.0], [70.1, 3708.0], [70.2, 3711.0], [70.3, 3713.0], [70.4, 3717.0], [70.5, 3720.0], [70.6, 3723.0], [70.7, 3727.0], [70.8, 3730.0], [70.9, 3733.0], [71.0, 3738.0], [71.1, 3742.0], [71.2, 3746.0], [71.3, 3750.0], [71.4, 3754.0], [71.5, 3758.0], [71.6, 3763.0], [71.7, 3768.0], [71.8, 3773.0], [71.9, 3779.0], [72.0, 3785.0], [72.1, 3791.0], [72.2, 3796.0], [72.3, 3802.0], [72.4, 3809.0], [72.5, 3816.0], [72.6, 3823.0], [72.7, 3830.0], [72.8, 3839.0], [72.9, 3848.0], [73.0, 3858.0], [73.1, 3867.0], [73.2, 3877.0], [73.3, 3891.0], [73.4, 3905.0], [73.5, 3918.0], [73.6, 3936.0], [73.7, 3955.0], [73.8, 3978.0], [73.9, 4005.0], [74.0, 4037.0], [74.1, 4076.0], [74.2, 4123.0], [74.3, 4196.0], [74.4, 4303.0], [74.5, 4460.0], [74.6, 4719.0], [74.7, 5106.0], [74.8, 7375.0], [74.9, 7536.0], [75.0, 7546.0], [75.1, 7552.0], [75.2, 7557.0], [75.3, 7561.0], [75.4, 7566.0], [75.5, 7569.0], [75.6, 7573.0], [75.7, 7576.0], [75.8, 7579.0], [75.9, 7582.0], [76.0, 7585.0], [76.1, 7587.0], [76.2, 7590.0], [76.3, 7592.0], [76.4, 7594.0], [76.5, 7597.0], [76.6, 7599.0], [76.7, 7602.0], [76.8, 7604.0], [76.9, 7607.0], [77.0, 7609.0], [77.1, 7611.0], [77.2, 7614.0], [77.3, 7617.0], [77.4, 7619.0], [77.5, 7622.0], [77.6, 7624.0], [77.7, 7627.0], [77.8, 7629.0], [77.9, 7632.0], [78.0, 7635.0], [78.1, 7638.0], [78.2, 7641.0], [78.3, 7644.0], [78.4, 7647.0], [78.5, 7650.0], [78.6, 7653.0], [78.7, 7656.0], [78.8, 7660.0], [78.9, 7663.0], [79.0, 7667.0], [79.1, 7670.0], [79.2, 7674.0], [79.3, 7678.0], [79.4, 7681.0], [79.5, 7686.0], [79.6, 7690.0], [79.7, 7693.0], [79.8, 7697.0], [79.9, 7701.0], [80.0, 7705.0], [80.1, 7710.0], [80.2, 7715.0], [80.3, 7719.0], [80.4, 7724.0], [80.5, 7730.0], [80.6, 7736.0], [80.7, 7741.0], [80.8, 7748.0], [80.9, 7755.0], [81.0, 7763.0], [81.1, 7770.0], [81.2, 7777.0], [81.3, 7784.0], [81.4, 7794.0], [81.5, 7806.0], [81.6, 7817.0], [81.7, 7829.0], [81.8, 7844.0], [81.9, 7859.0], [82.0, 7875.0], [82.1, 7894.0], [82.2, 7914.0], [82.3, 7934.0], [82.4, 7956.0], [82.5, 7980.0], [82.6, 8012.0], [82.7, 8063.0], [82.8, 8121.0], [82.9, 8226.0], [83.0, 8546.0], [83.1, 9181.0], [83.2, 15547.0], [83.3, 15556.0], [83.4, 15563.0], [83.5, 15568.0], [83.6, 15573.0], [83.7, 15578.0], [83.8, 15582.0], [83.9, 15586.0], [84.0, 15591.0], [84.1, 15595.0], [84.2, 15599.0], [84.3, 15602.0], [84.4, 15607.0], [84.5, 15611.0], [84.6, 15614.0], [84.7, 15617.0], [84.8, 15621.0], [84.9, 15625.0], [85.0, 15628.0], [85.1, 15633.0], [85.2, 15637.0], [85.3, 15641.0], [85.4, 15645.0], [85.5, 15650.0], [85.6, 15655.0], [85.7, 15660.0], [85.8, 15665.0], [85.9, 15670.0], [86.0, 15675.0], [86.1, 15680.0], [86.2, 15685.0], [86.3, 15690.0], [86.4, 15696.0], [86.5, 15702.0], [86.6, 15709.0], [86.7, 15716.0], [86.8, 15724.0], [86.9, 15732.0], [87.0, 15741.0], [87.1, 15750.0], [87.2, 15761.0], [87.3, 15772.0], [87.4, 15785.0], [87.5, 15802.0], [87.6, 15818.0], [87.7, 15843.0], [87.8, 15870.0], [87.9, 15898.0], [88.0, 15935.0], [88.1, 15978.0], [88.2, 16045.0], [88.3, 16120.0], [88.4, 16377.0], [88.5, 17284.0], [88.6, 21531.0], [88.7, 21540.0], [88.8, 21544.0], [88.9, 21547.0], [89.0, 21550.0], [89.1, 21552.0], [89.2, 21554.0], [89.3, 21556.0], [89.4, 21558.0], [89.5, 21560.0], [89.6, 21561.0], [89.7, 21563.0], [89.8, 21565.0], [89.9, 21566.0], [90.0, 21568.0], [90.1, 21570.0], [90.2, 21571.0], [90.3, 21573.0], [90.4, 21574.0], [90.5, 21576.0], [90.6, 21577.0], [90.7, 21578.0], [90.8, 21579.0], [90.9, 21581.0], [91.0, 21582.0], [91.1, 21584.0], [91.2, 21585.0], [91.3, 21586.0], [91.4, 21588.0], [91.5, 21589.0], [91.6, 21591.0], [91.7, 21592.0], [91.8, 21593.0], [91.9, 21595.0], [92.0, 21596.0], [92.1, 21598.0], [92.2, 21599.0], [92.3, 21601.0], [92.4, 21602.0], [92.5, 21604.0], [92.6, 21606.0], [92.7, 21607.0], [92.8, 21608.0], [92.9, 21610.0], [93.0, 21612.0], [93.1, 21614.0], [93.2, 21616.0], [93.3, 21618.0], [93.4, 21619.0], [93.5, 21621.0], [93.6, 21622.0], [93.7, 21624.0], [93.8, 21626.0], [93.9, 21628.0], [94.0, 21630.0], [94.1, 21632.0], [94.2, 21634.0], [94.3, 21637.0], [94.4, 21639.0], [94.5, 21641.0], [94.6, 21643.0], [94.7, 21645.0], [94.8, 21648.0], [94.9, 21650.0], [95.0, 21653.0], [95.1, 21655.0], [95.2, 21657.0], [95.3, 21660.0], [95.4, 21663.0], [95.5, 21666.0], [95.6, 21668.0], [95.7, 21672.0], [95.8, 21675.0], [95.9, 21678.0], [96.0, 21681.0], [96.1, 21684.0], [96.2, 21688.0], [96.3, 21691.0], [96.4, 21694.0], [96.5, 21698.0], [96.6, 21702.0], [96.7, 21707.0], [96.8, 21713.0], [96.9, 21718.0], [97.0, 21723.0], [97.1, 21730.0], [97.2, 21736.0], [97.3, 21742.0], [97.4, 21750.0], [97.5, 21758.0], [97.6, 21765.0], [97.7, 21775.0], [97.8, 21783.0], [97.9, 21792.0], [98.0, 21802.0], [98.1, 21813.0], [98.2, 21825.0], [98.3, 21841.0], [98.4, 21858.0], [98.5, 21875.0], [98.6, 21894.0], [98.7, 21914.0], [98.8, 21939.0], [98.9, 21963.0], [99.0, 21994.0], [99.1, 22018.0], [99.2, 22056.0], [99.3, 22097.0], [99.4, 22141.0], [99.5, 22195.0], [99.6, 22312.0], [99.7, 22542.0], [99.8, 23454.0], [99.9, 24884.0]], "isOverall": false, "label": "Compra de passagem aérea", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 88104.0, "series": [{"data": [[600.0, 3668.0], [700.0, 1997.0], [800.0, 1047.0], [900.0, 628.0], [1000.0, 339.0], [1100.0, 230.0], [1200.0, 146.0], [1300.0, 101.0], [1400.0, 75.0], [1500.0, 43.0], [1600.0, 22.0], [1700.0, 12.0], [1800.0, 9.0], [1900.0, 12.0], [2000.0, 5.0], [2100.0, 7.0], [2200.0, 9.0], [2300.0, 8.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 1.0], [2800.0, 1.0], [2900.0, 1.0], [200.0, 10206.0], [300.0, 88104.0], [400.0, 23517.0], [500.0, 7941.0]], "isOverall": false, "label": "Passagem comprada com sucesso.", "isController": false}, {"data": [[400.0, 7.0], [500.0, 21648.0], [600.0, 19971.0], [700.0, 7586.0], [800.0, 3113.0], [900.0, 1464.0], [1000.0, 817.0], [1100.0, 458.0], [1200.0, 228.0], [1300.0, 163.0], [1400.0, 97.0], [1500.0, 10465.0], [1600.0, 10800.0], [1700.0, 4056.0], [1800.0, 1707.0], [1900.0, 793.0], [2000.0, 495.0], [2100.0, 289.0], [2200.0, 193.0], [2300.0, 131.0], [2400.0, 60.0], [2500.0, 61.0], [2600.0, 49.0], [2700.0, 32.0], [2800.0, 31.0], [2900.0, 33.0], [3000.0, 37.0], [3100.0, 35.0], [3200.0, 24.0], [3300.0, 19.0], [3400.0, 6.0], [3500.0, 4458.0], [3700.0, 3373.0], [3600.0, 7559.0], [3800.0, 1550.0], [3900.0, 709.0], [4000.0, 388.0], [4100.0, 205.0], [4200.0, 128.0], [4300.0, 103.0], [4400.0, 66.0], [4600.0, 49.0], [4500.0, 53.0], [4700.0, 57.0], [4800.0, 41.0], [4900.0, 29.0], [5100.0, 41.0], [5000.0, 21.0], [5200.0, 28.0], [5300.0, 12.0], [5400.0, 8.0], [5500.0, 8.0], [5600.0, 8.0], [5800.0, 5.0], [5700.0, 1.0], [6000.0, 2.0], [6300.0, 2.0], [6200.0, 1.0], [6500.0, 2.0], [6400.0, 1.0], [7300.0, 21.0], [7400.0, 45.0], [7200.0, 7.0], [7500.0, 2449.0], [7600.0, 4548.0], [7700.0, 2176.0], [7800.0, 952.0], [7900.0, 599.0], [8000.0, 285.0], [8100.0, 149.0], [8600.0, 23.0], [8700.0, 20.0], [8300.0, 49.0], [8400.0, 34.0], [8200.0, 68.0], [8500.0, 28.0], [8900.0, 20.0], [8800.0, 17.0], [9100.0, 27.0], [9000.0, 27.0], [9200.0, 15.0], [9700.0, 3.0], [9400.0, 5.0], [9300.0, 13.0], [9500.0, 4.0], [10000.0, 1.0], [9900.0, 1.0], [10100.0, 1.0], [10400.0, 1.0], [15800.0, 584.0], [15700.0, 1426.0], [15600.0, 3106.0], [15500.0, 1505.0], [16100.0, 112.0], [15900.0, 309.0], [16000.0, 198.0], [16200.0, 38.0], [16300.0, 37.0], [17300.0, 12.0], [17100.0, 13.0], [17200.0, 9.0], [17400.0, 10.0], [16600.0, 10.0], [16400.0, 33.0], [16700.0, 10.0], [16800.0, 11.0], [16500.0, 16.0], [17000.0, 15.0], [16900.0, 16.0], [17500.0, 8.0], [17600.0, 13.0], [17700.0, 9.0], [17800.0, 4.0], [17900.0, 2.0], [18000.0, 4.0], [18200.0, 6.0], [18100.0, 1.0], [18500.0, 1.0], [21500.0, 5078.0], [22300.0, 73.0], [21800.0, 911.0], [22000.0, 397.0], [21700.0, 1994.0], [21600.0, 6000.0], [22200.0, 120.0], [22400.0, 53.0], [22500.0, 50.0], [21900.0, 544.0], [22100.0, 275.0], [22700.0, 14.0], [23400.0, 13.0], [23300.0, 14.0], [23200.0, 9.0], [23500.0, 7.0], [22900.0, 17.0], [23100.0, 11.0], [22800.0, 14.0], [23000.0, 13.0], [22600.0, 15.0], [23700.0, 7.0], [23600.0, 8.0], [23800.0, 13.0], [23900.0, 16.0], [24000.0, 12.0], [24100.0, 6.0], [24200.0, 6.0], [24300.0, 4.0], [24500.0, 15.0], [24400.0, 1.0], [24700.0, 16.0], [24600.0, 12.0], [24800.0, 8.0], [24900.0, 25.0], [25000.0, 13.0], [25100.0, 15.0], [25200.0, 14.0], [25300.0, 15.0], [25400.0, 11.0], [25500.0, 12.0], [25700.0, 3.0], [25600.0, 11.0], [25800.0, 8.0], [26000.0, 3.0], [25900.0, 4.0], [26100.0, 1.0], [26200.0, 1.0], [26300.0, 1.0], [26400.0, 1.0]], "isOverall": false, "label": "Compra de passagem aérea", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 26400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 121948.0, "series": [{"data": [[0.0, 121948.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 71602.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 83347.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.68571026E12, "maxY": 700.0, "series": [{"data": [[1.68571098E12, 700.0], [1.68571032E12, 700.0], [1.68571128E12, 700.0], [1.68571038E12, 700.0], [1.68571134E12, 700.0], [1.68571068E12, 700.0], [1.68571026E12, 700.0], [1.68571122E12, 700.0], [1.68571056E12, 700.0], [1.68571152E12, 1.0], [1.68571062E12, 700.0], [1.68571092E12, 700.0], [1.6857105E12, 700.0], [1.68571146E12, 678.1937372482937], [1.6857108E12, 700.0], [1.68571086E12, 700.0], [1.68571116E12, 700.0], [1.68571074E12, 700.0], [1.68571104E12, 700.0], [1.6857111E12, 700.0], [1.68571044E12, 700.0], [1.6857114E12, 700.0]], "isOverall": false, "label": "Teste de carga", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68571152E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 294.0, "minX": 1.0, "maxY": 21729.0, "series": [{"data": [[541.0, 1184.0], [524.0, 572.0], [521.0, 1091.5], [514.0, 900.0], [573.0, 360.0], [568.0, 353.0], [548.0, 415.0], [546.0, 637.0], [544.0, 634.0], [565.0, 396.0], [564.0, 391.0], [563.0, 405.0], [561.0, 386.0], [560.0, 1231.0], [559.0, 1228.0], [556.0, 408.0], [555.0, 438.0], [600.0, 344.0], [605.0, 306.0], [606.0, 462.0], [603.0, 491.0], [598.0, 398.0], [597.0, 420.0], [591.0, 565.0], [584.0, 335.0], [583.0, 1193.0], [579.0, 336.5], [638.0, 344.0], [639.0, 343.0], [635.0, 354.0], [633.0, 338.0], [628.0, 375.5], [626.0, 371.0], [625.0, 380.0], [624.0, 1141.0], [623.0, 332.0], [609.0, 294.0], [613.0, 323.0], [610.0, 359.0], [615.0, 368.0], [614.0, 315.0], [622.0, 419.0], [621.0, 426.5], [618.0, 309.0], [617.0, 432.0], [616.0, 325.0], [659.0, 520.0], [669.0, 342.0], [670.0, 338.5], [656.0, 1170.0], [667.0, 500.5], [665.0, 320.5], [664.0, 526.0], [647.0, 739.5], [644.0, 850.0], [642.0, 347.0], [640.0, 351.0], [655.0, 596.0], [652.0, 424.0], [651.0, 336.75], [650.0, 312.0], [663.0, 324.0], [662.0, 411.0], [661.0, 315.0], [692.0, 369.0], [700.0, 391.6366996680482], [698.0, 333.0], [697.0, 315.25], [696.0, 393.14285714285717], [687.0, 1010.0], [673.0, 308.0], [672.0, 441.0], [676.0, 497.0], [675.0, 799.75], [686.0, 840.0], [685.0, 333.0], [683.0, 834.5], [682.0, 484.45454545454544], [695.0, 496.90000000000003], [694.0, 455.0], [693.0, 333.0], [691.0, 330.3333333333333], [690.0, 387.5], [688.0, 379.75], [472.0, 922.0], [493.0, 806.0], [488.0, 839.0], [482.0, 844.0], [501.0, 911.0], [499.0, 895.0]], "isOverall": false, "label": "Passagem comprada com sucesso.", "isController": false}, {"data": [[699.9342150986015, 391.76066371296486]], "isOverall": false, "label": "Passagem comprada com sucesso.-Aggregated", "isController": false}, {"data": [[2.0, 15549.0], [3.0, 15546.0], [4.0, 15596.0], [6.0, 15571.5], [8.0, 15559.0], [9.0, 15558.0], [10.0, 15552.0], [11.0, 15645.0], [13.0, 15602.0], [14.0, 15604.0], [15.0, 15614.0], [17.0, 15556.5], [19.0, 15546.0], [21.0, 15561.0], [22.0, 15565.0], [23.0, 15545.0], [24.0, 21563.0], [25.0, 15557.0], [27.0, 15567.5], [28.0, 15669.0], [29.0, 15648.0], [30.0, 21588.0], [32.0, 18590.0], [34.0, 15592.5], [37.0, 15552.0], [36.0, 15569.5], [39.0, 15634.0], [38.0, 15558.0], [41.0, 21617.0], [40.0, 15594.0], [43.0, 15579.0], [42.0, 15604.0], [45.0, 15575.0], [44.0, 21595.0], [46.0, 21583.0], [49.0, 15595.0], [48.0, 21575.0], [51.0, 21527.0], [50.0, 21556.0], [53.0, 15548.0], [52.0, 15554.0], [55.0, 15629.0], [54.0, 15622.0], [57.0, 15563.0], [56.0, 15599.0], [61.0, 21577.0], [60.0, 15562.666666666666], [63.0, 21556.0], [62.0, 21560.0], [67.0, 15582.0], [66.0, 15564.0], [65.0, 15576.0], [64.0, 15596.0], [70.0, 21566.0], [69.0, 15564.5], [75.0, 21546.0], [74.0, 18559.0], [72.0, 18564.5], [79.0, 15550.0], [78.0, 7554.0], [77.0, 7686.0], [76.0, 15554.0], [83.0, 15543.0], [82.0, 7581.0], [81.0, 7554.0], [80.0, 7648.0], [86.0, 15614.0], [85.0, 21649.0], [84.0, 21646.0], [91.0, 7559.0], [90.0, 21574.0], [89.0, 7546.0], [88.0, 7553.5], [94.0, 21571.0], [93.0, 21592.0], [92.0, 15575.0], [99.0, 21564.0], [98.0, 21598.0], [97.0, 21547.0], [96.0, 21558.5], [103.0, 15563.0], [102.0, 15565.5], [100.0, 21557.0], [107.0, 15569.0], [106.0, 21571.0], [105.0, 15569.0], [111.0, 7548.0], [109.0, 21546.0], [108.0, 21554.0], [115.0, 15569.0], [114.0, 15575.0], [113.0, 15582.0], [112.0, 7537.0], [119.0, 15540.0], [118.0, 21625.0], [117.0, 15576.0], [116.0, 15570.0], [122.0, 15568.0], [120.0, 15585.0], [127.0, 21570.0], [126.0, 21559.0], [125.0, 15605.0], [124.0, 11633.0], [135.0, 7598.0], [134.0, 21542.0], [133.0, 7547.0], [132.0, 7553.0], [130.0, 18566.5], [128.0, 7540.0], [143.0, 21558.0], [142.0, 21570.0], [141.0, 21535.0], [140.0, 15553.0], [139.0, 15533.0], [138.0, 7577.0], [137.0, 7594.0], [136.0, 7606.0], [151.0, 15529.0], [150.0, 21582.0], [149.0, 15538.0], [148.0, 11532.5], [146.0, 7529.0], [145.0, 7546.0], [144.0, 21557.0], [159.0, 7535.0], [158.0, 7567.0], [157.0, 7536.0], [156.0, 7604.666666666667], [153.0, 21566.0], [152.0, 21556.0], [166.0, 15566.0], [165.0, 15584.0], [164.0, 15564.0], [163.0, 15592.0], [162.0, 15584.0], [161.0, 7609.0], [160.0, 15608.0], [175.0, 21545.0], [174.0, 21548.0], [172.0, 21561.0], [171.0, 21554.0], [170.0, 21616.0], [169.0, 21566.0], [168.0, 18630.5], [183.0, 15556.0], [182.0, 7560.0], [181.0, 7579.0], [180.0, 21545.0], [179.0, 21550.0], [178.0, 21557.0], [177.0, 21548.0], [176.0, 21563.0], [191.0, 15575.0], [190.0, 15570.0], [189.0, 15542.0], [188.0, 21606.0], [187.0, 7701.0], [186.0, 7575.0], [185.0, 15564.0], [184.0, 15547.0], [199.0, 3710.0], [198.0, 7631.0], [197.0, 15693.0], [196.0, 15691.0], [195.0, 3687.0], [194.0, 21555.0], [193.0, 7663.0], [192.0, 7663.0], [207.0, 3630.0], [206.0, 15604.5], [204.0, 12602.0], [202.0, 7668.0], [201.0, 3664.0], [200.0, 21594.0], [215.0, 7619.0], [214.0, 7624.0], [213.0, 21558.0], [212.0, 7585.0], [211.0, 15604.0], [210.0, 3611.0], [209.0, 15606.0], [208.0, 3620.0], [223.0, 21611.0], [222.0, 7560.0], [221.0, 11536.5], [219.0, 7606.0], [218.0, 7538.0], [217.0, 7537.0], [216.0, 7591.0], [231.0, 7577.5], [230.0, 15582.0], [229.0, 7536.0], [227.0, 7586.0], [225.0, 7602.0], [224.0, 7535.0], [238.0, 21600.0], [237.0, 7559.0], [236.0, 15599.0], [235.0, 7610.0], [234.0, 15553.0], [233.0, 21619.0], [232.0, 7585.0], [247.0, 3639.0], [246.0, 7682.0], [245.0, 3690.0], [244.0, 21554.0], [243.0, 21575.0], [242.0, 15571.0], [241.0, 18595.5], [240.0, 21600.0], [255.0, 7652.0], [254.0, 3611.0], [253.0, 7638.0], [252.0, 3613.0], [251.0, 7667.0], [250.0, 7583.0], [249.0, 21562.0], [248.0, 7575.0], [270.0, 3612.0], [271.0, 3564.0], [269.0, 3628.0], [268.0, 21568.0], [267.0, 3574.0], [266.0, 3546.0], [265.0, 21633.0], [264.0, 7589.0], [263.0, 7604.0], [257.0, 7636.0], [256.0, 3579.0], [259.0, 3576.0], [258.0, 7642.0], [262.0, 3589.0], [260.0, 15635.0], [286.0, 14575.0], [287.0, 21623.0], [285.0, 3538.0], [284.0, 3564.0], [282.0, 21568.0], [281.0, 21567.0], [280.0, 7553.0], [279.0, 7562.0], [272.0, 3607.0], [275.0, 18616.0], [273.0, 3578.0], [278.0, 7566.0], [277.0, 21602.0], [276.0, 3595.0], [302.0, 3563.0], [303.0, 3539.0], [301.0, 7570.0], [300.0, 3548.0], [299.0, 3600.0], [298.0, 7618.0], [297.0, 15624.0], [296.0, 7623.0], [295.0, 15537.0], [288.0, 3552.0], [291.0, 3640.0], [290.0, 11601.5], [294.0, 3628.0], [293.0, 9536.0], [307.0, 21574.0], [319.0, 7591.666666666666], [316.0, 15619.0], [315.0, 3623.0], [314.0, 12624.5], [312.0, 3589.0], [311.0, 3597.6666666666665], [308.0, 3551.0], [306.0, 7546.0], [305.0, 7551.0], [334.0, 7576.0], [335.0, 3548.0], [333.0, 21562.0], [332.0, 3564.0], [331.0, 3592.0], [330.0, 9595.0], [328.0, 3596.0], [327.0, 5599.0], [321.0, 11615.0], [324.0, 6303.333333333333], [339.0, 3568.0], [349.0, 3596.0], [351.0, 3603.0], [348.0, 7577.0], [347.0, 15617.0], [346.0, 7600.666666666667], [343.0, 3570.0], [341.0, 15619.0], [340.0, 7565.0], [338.0, 3557.0], [337.0, 7573.0], [336.0, 15620.0], [365.0, 7606.0], [366.0, 7604.0], [364.0, 7606.0], [363.0, 15610.0], [362.0, 9612.0], [360.0, 15614.0], [359.0, 12604.0], [357.0, 3602.0], [355.0, 9592.0], [353.0, 9637.0], [382.0, 11584.5], [383.0, 7606.0], [380.0, 21590.0], [371.0, 7581.0], [370.0, 11590.0], [368.0, 5596.0], [379.0, 3533.0], [378.0, 7553.0], [377.0, 7576.0], [376.0, 3572.0], [375.0, 21719.0], [374.0, 3541.0], [373.0, 7604.0], [372.0, 21592.0], [396.0, 7594.0], [399.0, 1609.0], [398.0, 3727.0], [397.0, 15552.0], [395.0, 6639.0], [391.0, 15601.0], [384.0, 1572.0], [387.0, 8611.0], [385.0, 3632.0], [390.0, 15592.0], [389.0, 3584.0], [388.0, 15581.0], [414.0, 8592.5], [415.0, 1589.0], [412.0, 1591.0], [402.0, 3658.5], [400.0, 21552.0], [411.0, 1672.0], [410.0, 7546.0], [409.0, 1659.0], [408.0, 3532.0], [407.0, 1634.0], [406.0, 1609.5], [404.0, 1614.5], [419.0, 1592.0], [431.0, 3565.0], [430.0, 1573.0], [426.0, 2563.0], [424.0, 3599.5], [422.0, 1564.0], [421.0, 1572.0], [420.0, 7609.0], [418.0, 21593.0], [417.0, 3623.0], [416.0, 21631.0], [447.0, 12631.0], [445.0, 3619.5], [443.0, 9430.0], [442.0, 2922.0], [436.0, 7103.750000000001], [461.0, 3572.0], [462.0, 1613.0], [460.0, 1572.0], [450.0, 7628.0], [449.0, 3659.0], [448.0, 7563.0], [459.0, 1591.0], [458.0, 3613.0], [457.0, 11566.0], [455.0, 1163.0], [454.0, 8093.0], [453.0, 21566.0], [452.0, 5600.5], [478.0, 1549.0], [479.0, 7594.0], [477.0, 3572.0], [476.0, 1553.0], [475.0, 7603.0], [474.0, 3601.0], [473.0, 1624.0], [471.0, 1539.0], [465.0, 1561.0], [464.0, 3572.0], [467.0, 1623.0], [466.0, 1623.0], [470.0, 1571.0], [469.0, 16109.0], [468.0, 1560.0], [483.0, 1555.0], [494.0, 21605.0], [492.0, 1555.5], [490.0, 7603.0], [489.0, 3593.0], [487.0, 1538.0], [486.0, 1341.5], [484.0, 3542.0], [481.0, 1601.0], [480.0, 3562.0], [510.0, 1634.0], [509.0, 3629.0], [498.0, 21576.0], [497.0, 21579.0], [496.0, 12592.5], [507.0, 1680.0], [506.0, 1556.0], [505.0, 639.0], [504.0, 1548.0], [503.0, 1635.0], [502.0, 1537.0], [500.0, 21598.0], [542.0, 21612.0], [543.0, 2581.0], [540.0, 21589.0], [539.0, 15590.0], [538.0, 8125.0], [536.0, 3602.3333333333335], [527.0, 21645.0], [514.0, 21657.0], [513.0, 1625.0], [517.0, 11688.5], [515.0, 21659.0], [519.0, 654.0], [518.0, 664.0], [526.0, 617.0], [525.0, 1633.0], [524.0, 15707.0], [522.0, 3664.0], [533.0, 8622.5], [531.0, 14596.0], [529.0, 3643.0], [528.0, 21627.0], [569.0, 634.0], [572.0, 1196.0], [575.0, 14679.5], [570.0, 1797.0], [567.0, 2605.5], [562.0, 601.0], [559.0, 4680.0], [547.0, 1700.0], [545.0, 21579.0], [551.0, 21543.0], [549.0, 686.0], [556.0, 1624.0], [553.0, 1640.0], [552.0, 7899.0], [593.0, 726.0], [607.0, 2482.0], [604.0, 799.0], [603.0, 7829.0], [601.0, 4466.0], [591.0, 860.0], [580.0, 1773.0], [577.0, 1133.5], [583.0, 3623.0], [581.0, 7781.0], [589.0, 5695.666666666667], [586.0, 1753.0], [585.0, 1701.0], [599.0, 21591.0], [597.0, 4705.0], [594.0, 567.0], [592.0, 7760.0], [637.0, 681.0], [636.0, 678.0], [634.0, 654.0], [632.0, 1187.0], [631.0, 3696.0], [629.0, 684.0], [619.0, 1792.0], [609.0, 7812.0], [669.0, 18782.5], [670.0, 7644.0], [657.0, 15780.0], [656.0, 21729.0], [659.0, 1763.0], [658.0, 1709.0], [661.0, 1834.0], [660.0, 3900.0], [668.0, 615.0], [667.0, 664.0], [666.0, 750.0], [665.0, 1324.0], [664.0, 860.0], [645.0, 809.0], [641.0, 3661.0], [655.0, 711.0], [654.0, 711.0], [653.0, 1758.0], [652.0, 1573.0], [651.0, 7624.0], [650.0, 850.0], [663.0, 1693.0], [662.0, 635.0], [698.0, 4011.0000000000005], [692.0, 965.6666666666667], [700.0, 5092.183548153453], [697.0, 11125.5], [696.0, 6726.5], [687.0, 1095.0], [672.0, 4307.333333333333], [675.0, 3759.5], [673.0, 2091.5], [677.0, 1836.0], [676.0, 3836.5], [679.0, 3754.0], [678.0, 651.0], [686.0, 12603.5], [685.0, 671.0], [684.0, 2411.0], [683.0, 2720.5], [682.0, 21584.0], [681.0, 2817.5], [680.0, 882.0], [695.0, 6079.25], [694.0, 1419.3333333333333], [693.0, 631.0], [691.0, 4361.0], [690.0, 1760.5], [689.0, 614.0], [688.0, 2336.0], [1.0, 21567.0]], "isOverall": false, "label": "Compra de passagem aérea", "isController": false}, {"data": [[698.2889540665589, 5114.422055834941]], "isOverall": false, "label": "Compra de passagem aérea-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 700.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2.0, "minX": 1.68571026E12, "maxY": 1542627.75, "series": [{"data": [[1.68571098E12, 1295879.8333333333], [1.68571032E12, 1357682.9], [1.68571128E12, 1398343.1333333333], [1.68571038E12, 1542627.75], [1.68571134E12, 1392602.0833333333], [1.68571068E12, 1391926.8833333333], [1.68571026E12, 67509.06666666667], [1.68571122E12, 1363552.0666666667], [1.68571056E12, 1505965.65], [1.68571152E12, 79.28333333333333], [1.68571062E12, 1451091.6333333333], [1.68571092E12, 1401608.4166666667], [1.6857105E12, 1469935.5666666667], [1.68571146E12, 1116229.8166666667], [1.6857108E12, 1374366.5333333334], [1.68571086E12, 1449992.15], [1.68571116E12, 1336106.5666666667], [1.68571074E12, 1378149.1166666667], [1.68571104E12, 1264179.0166666666], [1.6857111E12, 1292038.3333333333], [1.68571044E12, 1488644.95], [1.6857114E12, 1342744.6166666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68571098E12, 27090.016666666666], [1.68571032E12, 28385.933333333334], [1.68571128E12, 29248.583333333332], [1.68571038E12, 32256.783333333333], [1.68571134E12, 29119.283333333333], [1.68571068E12, 29103.1], [1.68571026E12, 1459.7], [1.68571122E12, 28514.15], [1.68571056E12, 31497.583333333332], [1.68571152E12, 2.0], [1.68571062E12, 30342.816666666666], [1.68571092E12, 29324.05], [1.6857105E12, 30736.233333333334], [1.68571146E12, 23529.583333333332], [1.6857108E12, 28753.3], [1.68571086E12, 30309.916666666668], [1.68571116E12, 27940.85], [1.68571074E12, 28825.883333333335], [1.68571104E12, 26453.366666666665], [1.6857111E12, 27010.35], [1.68571044E12, 31134.0], [1.6857114E12, 28080.716666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68571152E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 348.27308970099733, "minX": 1.68571026E12, "maxY": 21567.0, "series": [{"data": [[1.68571098E12, 426.72469573255285], [1.68571032E12, 464.30488522660215], [1.68571128E12, 366.2330708661407], [1.68571038E12, 364.61059997408194], [1.68571134E12, 353.75111238696746], [1.68571068E12, 370.2517944300882], [1.68571026E12, 588.0177304964535], [1.68571122E12, 393.23947792931324], [1.68571056E12, 348.27308970099733], [1.68571062E12, 362.1394131423063], [1.68571092E12, 430.04790504790475], [1.6857105E12, 430.30649986401977], [1.68571146E12, 481.4676607642125], [1.6857108E12, 392.73622047244226], [1.68571086E12, 368.7929800412946], [1.68571116E12, 363.51309684178955], [1.68571074E12, 394.95786720906665], [1.68571104E12, 361.99793716280533], [1.6857111E12, 361.2348941431], [1.68571044E12, 403.65658602150455], [1.6857114E12, 414.1552212125724]], "isOverall": false, "label": "Passagem comprada com sucesso.", "isController": false}, {"data": [[1.68571098E12, 5481.549930329773], [1.68571032E12, 4914.158842633566], [1.68571128E12, 5057.913987712529], [1.68571038E12, 4592.985072689512], [1.68571134E12, 5196.382801265446], [1.68571068E12, 5136.197783215784], [1.68571026E12, 7735.094786729858], [1.68571122E12, 5162.597387347733], [1.68571056E12, 4665.6149455800505], [1.68571152E12, 21567.0], [1.68571062E12, 4801.876914585352], [1.68571092E12, 5065.879908935703], [1.6857105E12, 4729.505585831061], [1.68571146E12, 5836.68483412323], [1.6857108E12, 5188.780841799713], [1.68571086E12, 4833.065753045401], [1.68571116E12, 5333.7395536917875], [1.68571074E12, 5161.07173913043], [1.68571104E12, 5690.618402394835], [1.6857111E12, 5679.8894581586665], [1.68571044E12, 4662.475352585637], [1.6857114E12, 5348.501042908202]], "isOverall": false, "label": "Compra de passagem aérea", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68571152E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 328.5996013289032, "minX": 1.68571026E12, "maxY": 21555.0, "series": [{"data": [[1.68571098E12, 407.47342474195034], [1.68571032E12, 445.53472630959317], [1.68571128E12, 347.057981388689], [1.68571038E12, 344.5004535441215], [1.68571134E12, 334.57442227644503], [1.68571068E12, 350.9233419465974], [1.68571026E12, 576.3297872340423], [1.68571122E12, 373.6798650828577], [1.68571056E12, 328.5996013289032], [1.68571062E12, 343.04325664692044], [1.68571092E12, 410.6911196911193], [1.6857105E12, 410.65936905085783], [1.68571146E12, 462.1295433364401], [1.6857108E12, 371.05234762321373], [1.68571086E12, 349.5928423950454], [1.68571116E12, 344.3096841790141], [1.68571074E12, 375.6439052738627], [1.68571104E12, 342.481910504602], [1.6857111E12, 341.5112038324841], [1.68571044E12, 384.0705645161298], [1.6857114E12, 394.95248026217826]], "isOverall": false, "label": "Passagem comprada com sucesso.", "isController": false}, {"data": [[1.68571098E12, 5469.832636631048], [1.68571032E12, 4902.125922645404], [1.68571128E12, 5046.187598228331], [1.68571038E12, 4580.644210799592], [1.68571134E12, 5184.7497842968], [1.68571068E12, 5124.551892903423], [1.68571026E12, 7730.774881516587], [1.68571122E12, 5150.773080874795], [1.68571056E12, 4653.512742235201], [1.68571152E12, 21555.0], [1.68571062E12, 4790.162274044437], [1.68571092E12, 5054.171172453032], [1.6857105E12, 4717.834196185289], [1.68571146E12, 5825.2014218009435], [1.6857108E12, 5176.326705370098], [1.68571086E12, 4821.38344407534], [1.68571116E12, 5322.050322000898], [1.68571074E12, 5149.213623188408], [1.68571104E12, 5678.650701118651], [1.6857111E12, 5668.063809967386], [1.68571044E12, 4650.690396239085], [1.6857114E12, 5336.863974970206]], "isOverall": false, "label": "Compra de passagem aérea", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68571152E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68571026E12, "maxY": 21269.0, "series": [{"data": [[1.68571098E12, 0.0], [1.68571032E12, 0.0], [1.68571128E12, 0.0], [1.68571038E12, 0.0], [1.68571134E12, 0.0], [1.68571068E12, 0.0], [1.68571026E12, 0.0], [1.68571122E12, 0.0], [1.68571056E12, 0.0], [1.68571062E12, 0.0], [1.68571092E12, 0.0], [1.6857105E12, 0.0], [1.68571146E12, 0.0], [1.6857108E12, 0.0], [1.68571086E12, 0.0], [1.68571116E12, 0.0], [1.68571074E12, 0.03414208920528847], [1.68571104E12, 0.0], [1.6857111E12, 0.0], [1.68571044E12, 0.0], [1.6857114E12, 0.0]], "isOverall": false, "label": "Passagem comprada com sucesso.", "isController": false}, {"data": [[1.68571098E12, 5055.502244929551], [1.68571032E12, 4467.457336876312], [1.68571128E12, 4697.625089298474], [1.68571038E12, 4231.873701973005], [1.68571134E12, 4847.354328444056], [1.68571068E12, 4762.510868000563], [1.68571026E12, 6226.071090047389], [1.68571122E12, 4775.886540437402], [1.68571056E12, 4317.998141757376], [1.68571152E12, 21269.0], [1.68571062E12, 4441.587139506005], [1.68571092E12, 4640.774615822417], [1.6857105E12, 4311.728065395097], [1.68571146E12, 5379.078876100201], [1.6857108E12, 4794.707837445585], [1.68571086E12, 4467.885520487271], [1.68571116E12, 4972.337726523894], [1.68571074E12, 4775.081304347846], [1.68571104E12, 5329.05152040334], [1.6857111E12, 5320.95994410805], [1.68571044E12, 4267.268770987244], [1.6857114E12, 4937.764451728255]], "isOverall": false, "label": "Compra de passagem aérea", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68571152E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 273.0, "minX": 1.68571026E12, "maxY": 26433.0, "series": [{"data": [[1.68571098E12, 22560.0], [1.68571032E12, 26433.0], [1.68571128E12, 22355.0], [1.68571038E12, 23414.0], [1.68571134E12, 22247.0], [1.68571068E12, 23321.0], [1.68571026E12, 8159.0], [1.68571122E12, 22637.0], [1.68571056E12, 22151.0], [1.68571152E12, 21567.0], [1.68571062E12, 23081.0], [1.68571092E12, 22524.0], [1.6857105E12, 22363.0], [1.68571146E12, 22671.0], [1.6857108E12, 24030.0], [1.68571086E12, 22226.0], [1.68571116E12, 22308.0], [1.68571074E12, 22996.0], [1.68571104E12, 22160.0], [1.6857111E12, 22342.0], [1.68571044E12, 23093.0], [1.6857114E12, 22695.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68571098E12, 7929.499999999998], [1.68571032E12, 7811.0], [1.68571128E12, 7702.0], [1.68571038E12, 7563.0], [1.68571134E12, 7674.0], [1.68571068E12, 7714.6], [1.68571026E12, 7983.0], [1.68571122E12, 7702.700000000001], [1.68571056E12, 7600.0], [1.68571152E12, 21567.0], [1.68571062E12, 7626.0], [1.68571092E12, 7738.400000000003], [1.6857105E12, 7631.5], [1.68571146E12, 15570.0], [1.6857108E12, 7698.1], [1.68571086E12, 7643.0], [1.68571116E12, 7723.0], [1.68571074E12, 7756.700000000001], [1.68571104E12, 7869.0], [1.6857111E12, 7849.0], [1.68571044E12, 7627.4], [1.6857114E12, 7780.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68571098E12, 21852.0], [1.68571032E12, 24910.579999999998], [1.68571128E12, 21731.15], [1.68571038E12, 21961.78], [1.68571134E12, 21709.120000000003], [1.68571068E12, 21739.86], [1.68571026E12, 8115.9], [1.68571122E12, 21752.0], [1.68571056E12, 21695.4], [1.68571152E12, 21567.0], [1.68571062E12, 21705.0], [1.68571092E12, 21807.56], [1.6857105E12, 21806.05], [1.68571146E12, 21921.52], [1.6857108E12, 21793.0], [1.68571086E12, 21702.0], [1.68571116E12, 21718.82], [1.68571074E12, 21740.17], [1.68571104E12, 21723.5], [1.6857111E12, 21732.739999999998], [1.68571044E12, 21748.0], [1.6857114E12, 21836.48]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68571098E12, 21591.0], [1.68571032E12, 21873.0], [1.68571128E12, 21566.0], [1.68571038E12, 21558.9], [1.68571134E12, 21568.0], [1.68571068E12, 21563.0], [1.68571026E12, 8048.0], [1.68571122E12, 21572.0], [1.68571056E12, 21552.0], [1.68571152E12, 21567.0], [1.68571062E12, 21538.0], [1.68571092E12, 21573.0], [1.6857105E12, 16312.25], [1.68571146E12, 21591.0], [1.6857108E12, 21564.0], [1.68571086E12, 21561.0], [1.68571116E12, 21581.0], [1.68571074E12, 21573.0], [1.68571104E12, 21583.0], [1.6857111E12, 21583.0], [1.68571044E12, 15975.099999999986], [1.6857114E12, 21587.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68571098E12, 285.0], [1.68571032E12, 284.0], [1.68571128E12, 282.0], [1.68571038E12, 279.0], [1.68571134E12, 281.0], [1.68571068E12, 277.0], [1.68571026E12, 297.0], [1.68571122E12, 277.0], [1.68571056E12, 273.0], [1.68571152E12, 21567.0], [1.68571062E12, 274.0], [1.68571092E12, 282.0], [1.6857105E12, 279.0], [1.68571146E12, 284.0], [1.6857108E12, 281.0], [1.68571086E12, 280.0], [1.68571116E12, 278.0], [1.68571074E12, 284.0], [1.68571104E12, 278.0], [1.6857111E12, 278.0], [1.68571044E12, 283.0], [1.6857114E12, 282.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68571098E12, 600.0], [1.68571032E12, 597.0], [1.68571128E12, 542.0], [1.68571038E12, 537.0], [1.68571134E12, 537.0], [1.68571068E12, 549.0], [1.68571026E12, 7493.0], [1.68571122E12, 571.0], [1.68571056E12, 520.0], [1.68571152E12, 21567.0], [1.68571062E12, 531.0], [1.68571092E12, 602.0], [1.6857105E12, 585.0], [1.68571146E12, 670.0], [1.6857108E12, 557.0], [1.68571086E12, 545.0], [1.68571116E12, 540.0], [1.68571074E12, 568.0], [1.68571104E12, 538.0], [1.6857111E12, 539.0], [1.68571044E12, 574.0], [1.6857114E12, 588.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68571152E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 350.0, "minX": 1.0, "maxY": 21567.0, "series": [{"data": [[2.0, 15547.5], [11.0, 15578.0], [16.0, 15583.5], [39.0, 15588.0], [43.0, 15569.0], [45.0, 15566.0], [53.0, 691.5], [60.0, 15568.0], [78.0, 1047.0], [79.0, 1846.0], [91.0, 7586.0], [95.0, 842.0], [111.0, 7471.0], [108.0, 518.0], [118.0, 1656.0], [120.0, 1524.0], [127.0, 1801.0], [125.0, 3656.0], [130.0, 547.0], [133.0, 548.0], [139.0, 633.0], [136.0, 530.0], [138.0, 811.0], [151.0, 659.5], [144.0, 479.0], [150.0, 526.0], [156.0, 1713.5], [152.0, 556.5], [155.0, 515.0], [158.0, 584.5], [153.0, 350.0], [157.0, 680.0], [167.0, 376.5], [162.0, 680.5], [160.0, 764.0], [161.0, 1054.0], [164.0, 807.5], [163.0, 531.5], [166.0, 545.0], [175.0, 542.0], [172.0, 403.0], [168.0, 407.5], [171.0, 565.0], [169.0, 575.5], [174.0, 441.0], [170.0, 540.0], [183.0, 532.0], [181.0, 530.5], [176.0, 438.0], [179.0, 569.5], [180.0, 556.5], [178.0, 579.5], [191.0, 503.5], [186.0, 535.0], [190.0, 531.5], [184.0, 457.5], [189.0, 589.0], [188.0, 422.0], [185.0, 520.0], [187.0, 571.0], [192.0, 562.0], [194.0, 569.0], [198.0, 523.5], [197.0, 605.0], [196.0, 506.0], [193.0, 513.5], [195.0, 529.5], [199.0, 595.0], [202.0, 548.0], [204.0, 558.5], [201.0, 567.0], [207.0, 577.5], [206.0, 540.5], [200.0, 541.0], [203.0, 572.5], [205.0, 574.0], [215.0, 568.0], [211.0, 570.0], [213.0, 574.0], [214.0, 566.0], [209.0, 553.0], [210.0, 526.5], [212.0, 574.0], [208.0, 550.0], [223.0, 538.0], [216.0, 548.0], [221.0, 532.0], [217.0, 566.0], [220.0, 551.5], [218.0, 553.0], [219.0, 566.0], [222.0, 505.5], [230.0, 562.0], [225.0, 557.0], [224.0, 550.0], [228.0, 564.0], [227.0, 562.0], [229.0, 553.0], [231.0, 561.0], [226.0, 581.0], [232.0, 580.0], [235.0, 554.0], [233.0, 554.0], [234.0, 560.0], [238.0, 553.0], [237.0, 552.0], [236.0, 580.0], [239.0, 565.0], [244.0, 589.0], [246.0, 548.0], [242.0, 578.0], [241.0, 552.5], [245.0, 541.5], [243.0, 568.0], [240.0, 546.0], [247.0, 583.0], [248.0, 587.5], [255.0, 551.0], [250.0, 560.0], [251.0, 559.0], [253.0, 546.0], [249.0, 543.0], [252.0, 546.5], [254.0, 535.0], [259.0, 611.0], [260.0, 581.0], [261.0, 511.0], [262.0, 571.0], [263.0, 569.0], [256.0, 560.0], [257.0, 568.0], [270.0, 560.0], [269.0, 565.0], [265.0, 578.0], [267.0, 542.0], [266.0, 537.0], [264.0, 549.5], [271.0, 520.5], [258.0, 565.5], [268.0, 587.5], [275.0, 610.0], [277.0, 550.0], [287.0, 611.0], [280.0, 586.0], [281.0, 537.0], [285.0, 578.0], [284.0, 609.0], [286.0, 518.5], [276.0, 553.0], [272.0, 592.0], [279.0, 574.0], [278.0, 665.5], [273.0, 558.0], [274.0, 563.0], [282.0, 552.5], [283.0, 567.5], [291.0, 863.0], [289.0, 970.0], [300.0, 561.0], [292.0, 548.5], [293.0, 425.0], [290.0, 578.5], [295.0, 571.0], [288.0, 497.0], [303.0, 461.0], [297.0, 518.0], [299.0, 661.5], [298.0, 581.0], [294.0, 607.0], [317.0, 661.0], [306.0, 536.5], [308.0, 679.0], [309.0, 625.0], [311.0, 419.0], [319.0, 774.5], [305.0, 872.0], [316.0, 612.5], [312.0, 603.0], [313.0, 597.0], [315.0, 575.0], [320.0, 565.0], [321.0, 554.0], [333.0, 663.0], [324.0, 418.5], [322.0, 465.0], [330.0, 704.5], [349.0, 2334.0], [344.0, 880.0], [337.0, 1996.0], [347.0, 687.0], [340.0, 487.5], [342.0, 547.5], [339.0, 643.0], [378.0, 7843.0], [1.0, 21567.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[253.0, 1144.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 378.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 21555.0, "series": [{"data": [[2.0, 15535.5], [11.0, 15566.0], [16.0, 15574.0], [39.0, 15576.0], [43.0, 15558.0], [45.0, 15555.0], [53.0, 676.0], [60.0, 15553.0], [78.0, 1023.0], [79.0, 1838.0], [91.0, 7571.0], [95.0, 831.0], [111.0, 7469.0], [108.0, 449.5], [118.0, 1631.0], [120.0, 1513.5], [127.0, 1800.0], [125.0, 3642.0], [130.0, 536.0], [133.0, 536.0], [139.0, 614.0], [136.0, 518.5], [138.0, 796.0], [151.0, 656.5], [144.0, 464.0], [150.0, 514.5], [156.0, 1711.0], [152.0, 538.5], [155.0, 496.0], [158.0, 576.0], [153.0, 328.0], [157.0, 667.0], [167.0, 355.0], [162.0, 664.0], [160.0, 741.0], [161.0, 1014.0], [164.0, 763.5], [163.0, 520.5], [166.0, 537.0], [175.0, 528.5], [172.0, 385.0], [168.0, 380.0], [171.0, 555.0], [169.0, 563.0], [174.0, 422.5], [170.0, 527.5], [183.0, 522.0], [181.0, 518.5], [176.0, 419.0], [179.0, 562.5], [180.0, 547.5], [178.0, 568.5], [191.0, 488.0], [186.0, 524.0], [190.0, 520.0], [184.0, 442.0], [189.0, 581.0], [188.0, 402.0], [185.0, 507.0], [187.0, 556.0], [192.0, 548.0], [194.0, 556.0], [198.0, 507.0], [197.0, 591.0], [196.0, 486.5], [193.0, 498.5], [195.0, 520.0], [199.0, 581.0], [202.0, 535.5], [204.0, 547.0], [201.0, 554.5], [207.0, 564.0], [206.0, 524.0], [200.0, 531.0], [203.0, 559.5], [205.0, 565.0], [215.0, 556.0], [211.0, 559.0], [213.0, 559.0], [214.0, 552.5], [209.0, 539.0], [210.0, 516.0], [212.0, 559.0], [208.0, 538.0], [223.0, 527.0], [216.0, 534.0], [221.0, 519.0], [217.0, 554.0], [220.0, 540.0], [218.0, 540.5], [219.0, 552.0], [222.0, 489.0], [230.0, 550.5], [225.0, 544.0], [224.0, 537.0], [228.0, 551.5], [227.0, 548.0], [229.0, 539.0], [231.0, 548.0], [226.0, 569.0], [232.0, 568.5], [235.0, 541.0], [233.0, 542.0], [234.0, 548.0], [238.0, 539.0], [237.0, 539.0], [236.0, 567.0], [239.0, 553.0], [244.0, 575.0], [246.0, 533.0], [242.0, 564.0], [241.0, 539.0], [245.0, 527.5], [243.0, 556.0], [240.0, 533.0], [247.0, 569.0], [248.0, 574.0], [255.0, 536.0], [250.0, 547.0], [251.0, 546.0], [253.0, 532.0], [249.0, 531.0], [252.0, 535.0], [254.0, 523.5], [259.0, 598.5], [260.0, 571.0], [261.0, 489.0], [262.0, 560.0], [263.0, 556.0], [256.0, 547.5], [257.0, 554.0], [270.0, 542.0], [269.0, 552.0], [265.0, 566.0], [267.0, 525.0], [266.0, 522.5], [264.0, 536.0], [271.0, 499.5], [258.0, 553.0], [268.0, 570.0], [275.0, 598.0], [277.0, 540.0], [287.0, 601.0], [280.0, 568.5], [281.0, 526.0], [285.0, 565.0], [284.0, 595.5], [286.0, 501.0], [276.0, 540.0], [272.0, 577.5], [279.0, 555.0], [278.0, 657.5], [273.0, 544.0], [274.0, 549.0], [282.0, 538.0], [283.0, 557.0], [291.0, 845.0], [289.0, 957.0], [300.0, 551.0], [292.0, 539.5], [293.0, 409.0], [290.0, 562.5], [295.0, 558.0], [288.0, 480.5], [303.0, 444.5], [297.0, 504.5], [299.0, 643.5], [298.0, 566.0], [294.0, 597.0], [317.0, 654.0], [306.0, 523.0], [308.0, 662.0], [309.0, 614.0], [311.0, 397.0], [319.0, 757.0], [305.0, 858.0], [316.0, 600.5], [312.0, 597.5], [313.0, 583.5], [315.0, 566.0], [320.0, 556.0], [321.0, 542.0], [333.0, 649.0], [324.0, 395.5], [322.0, 447.0], [330.0, 692.5], [349.0, 2326.0], [344.0, 871.5], [337.0, 1969.0], [347.0, 675.0], [340.0, 470.0], [342.0, 526.5], [339.0, 633.0], [378.0, 7840.0], [1.0, 21555.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[253.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 378.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 23.383333333333333, "minX": 1.68571026E12, "maxY": 257.0833333333333, "series": [{"data": [[1.68571098E12, 216.08333333333334], [1.68571032E12, 224.98333333333332], [1.68571128E12, 232.95], [1.68571038E12, 257.0833333333333], [1.68571134E12, 232.1], [1.68571068E12, 232.0], [1.68571026E12, 23.383333333333333], [1.68571122E12, 227.28333333333333], [1.68571056E12, 250.88333333333333], [1.68571062E12, 241.95], [1.68571092E12, 233.31666666666666], [1.6857105E12, 244.68333333333334], [1.68571146E12, 177.06666666666666], [1.6857108E12, 228.51666666666668], [1.68571086E12, 242.31666666666666], [1.68571116E12, 222.63333333333333], [1.68571074E12, 229.65], [1.68571104E12, 210.31666666666666], [1.6857111E12, 215.51666666666668], [1.68571044E12, 248.38333333333333], [1.6857114E12, 223.86666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68571146E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68571026E12, "maxY": 257.01666666666665, "series": [{"data": [[1.68571098E12, 215.83333333333334], [1.68571032E12, 226.16666666666666], [1.68571128E12, 233.06666666666666], [1.68571038E12, 257.01666666666665], [1.68571134E12, 232.01666666666668], [1.68571068E12, 231.88333333333333], [1.68571026E12, 11.733333333333333], [1.68571122E12, 227.2], [1.68571056E12, 250.98333333333332], [1.68571152E12, 0.016666666666666666], [1.68571062E12, 241.76666666666668], [1.68571092E12, 233.68333333333334], [1.6857105E12, 244.9], [1.68571146E12, 187.88333333333333], [1.6857108E12, 229.13333333333333], [1.68571086E12, 241.48333333333332], [1.68571116E12, 222.63333333333333], [1.68571074E12, 229.7], [1.68571104E12, 210.81666666666666], [1.6857111E12, 215.2], [1.68571044E12, 248.08333333333334], [1.6857114E12, 223.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68571074E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68571152E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68571026E12, "maxY": 128.61666666666667, "series": [{"data": [[1.68571098E12, 108.18333333333334], [1.68571032E12, 113.26666666666667], [1.68571128E12, 116.41666666666667], [1.68571038E12, 128.61666666666667], [1.68571134E12, 116.11666666666666], [1.68571068E12, 116.1], [1.68571026E12, 4.7], [1.68571122E12, 113.65], [1.68571056E12, 125.41666666666667], [1.68571062E12, 120.98333333333333], [1.68571092E12, 116.55], [1.6857105E12, 122.56666666666666], [1.68571146E12, 89.41666666666667], [1.6857108E12, 114.3], [1.68571086E12, 121.08333333333333], [1.68571116E12, 111.35], [1.68571074E12, 114.71666666666667], [1.68571104E12, 105.03333333333333], [1.6857111E12, 107.85], [1.68571044E12, 124.0], [1.6857114E12, 111.88333333333334]], "isOverall": false, "label": "Passagem comprada com sucesso.-success", "isController": false}, {"data": [[1.68571074E12, 0.016666666666666666]], "isOverall": false, "label": "Compra de passagem aérea-failure", "isController": false}, {"data": [[1.68571098E12, 107.65], [1.68571032E12, 112.9], [1.68571128E12, 116.65], [1.68571038E12, 128.4], [1.68571134E12, 115.9], [1.68571068E12, 115.78333333333333], [1.68571026E12, 7.033333333333333], [1.68571122E12, 113.55], [1.68571056E12, 125.56666666666666], [1.68571152E12, 0.016666666666666666], [1.68571062E12, 120.78333333333333], [1.68571092E12, 117.13333333333334], [1.6857105E12, 122.33333333333333], [1.68571146E12, 98.46666666666667], [1.6857108E12, 114.83333333333333], [1.68571086E12, 120.4], [1.68571116E12, 111.28333333333333], [1.68571074E12, 114.98333333333333], [1.68571104E12, 105.78333333333333], [1.6857111E12, 107.35], [1.68571044E12, 124.08333333333333], [1.6857114E12, 111.86666666666666]], "isOverall": false, "label": "Compra de passagem aérea-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68571152E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68571026E12, "maxY": 257.01666666666665, "series": [{"data": [[1.68571098E12, 215.83333333333334], [1.68571032E12, 226.16666666666666], [1.68571128E12, 233.06666666666666], [1.68571038E12, 257.01666666666665], [1.68571134E12, 232.01666666666668], [1.68571068E12, 231.88333333333333], [1.68571026E12, 11.733333333333333], [1.68571122E12, 227.2], [1.68571056E12, 250.98333333333332], [1.68571152E12, 0.016666666666666666], [1.68571062E12, 241.76666666666668], [1.68571092E12, 233.68333333333334], [1.6857105E12, 244.9], [1.68571146E12, 187.88333333333333], [1.6857108E12, 229.13333333333333], [1.68571086E12, 241.48333333333332], [1.68571116E12, 222.63333333333333], [1.68571074E12, 229.7], [1.68571104E12, 210.81666666666666], [1.6857111E12, 215.2], [1.68571044E12, 248.08333333333334], [1.6857114E12, 223.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68571074E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68571152E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

